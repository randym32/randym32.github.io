{
  "api/Anki.AudioKinetic.AudioAssets.html": {
    "href": "api/Anki.AudioKinetic.AudioAssets.html",
    "title": "Class AudioAssets | Resources SDK",
    "keywords": "Class AudioAssets This class is used to wrap the audio assets in Vector and Cozmo. These assets are Audio-Kinetic WWise soundbank files and other supporting files. Inheritance Object AudioAssets Implements IDisposable Namespace : Anki.AudioKinetic Assembly : Anki.Resources.SDK.dll Syntax public class AudioAssets : IDisposable Remarks This supports the audio assets as bare files, as is done with Vector resources; or in a zip file, as is done with Cozmo resources. Only features that are present in Cozmo or Vector are given much attention; other WWise features are ignored. AudioKinetic , Wwise Fundamentals (2015) References: AudioKinetic WWise Fundamentals AudioKinetic, Wwise User’s Guide AudioKinetic, The Wwise Project Adventure AudioKinetic, Get Started Using Wwise AudioKinetic, Wwise 101 Wwise Fundamentals, Understanding Events Examples You can pipe the sounds into NAudio using code like: var audioAssets = new AudioAssets(.. path to sound folder ...); var WEM = audioAssets.WEM( .. the id for the sound ..); var waveOut = new WaveOut(); var waveProvider = WEM.WaveProvider(); waveOut.Init(waveProvider); waveOut.Play(); Thread.Sleep(30000); waveOut.Stop(); waveProvider.Dispose(); waveOut.Dispose(); Constructors AudioAssets(IFolderWrapper) Creates an object that can access the audio system resources Declaration public AudioAssets(IFolderWrapper folderWrapper) Parameters Type Name Description IFolderWrapper folderWrapper The file/archive wrapper that can access the sound bank information AudioAssets(String) Creates an object that can access the audio system resources Declaration public AudioAssets(string basePath) Parameters Type Name Description String basePath A path a zip file, or a /sound folder, which can contain bare files, or an AudioAssets.zip container Remarks This automatically detects if the audio assets are wrapped or not Properties Languages The languages within the audio assets system Declaration public IReadOnlyCollection<string> Languages { get; } Property Value Type Description IReadOnlyCollection < String > Remarks These are similar to locales, but the names are different; it also incldues a special effects language (SFX) Plugins A list of the audio plug-ins in the sound processing pipeline Declaration public IReadOnlyList<string> Plugins { get; } Property Value Type Description IReadOnlyList < String > SoundBankNames Retrieves a list of the sound banks Declaration public IReadOnlyCollection<string> SoundBankNames { get; } Property Value Type Description IReadOnlyCollection < String > Remarks The banks can be localized, but there isn't any reason here Methods Dispose() Dispose of any internal resources Declaration public void Dispose() Dispose(Boolean) Dispose of the archive Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true, right? IDForString(String) Compute the AudioKinetic WWise ID from the string Declaration public static uint IDForString(string str) Parameters Type Name Description String str The string Returns Type Description UInt32 The 32-bit ID for the string Retain() Increment the reference count for this object. Decrement the count using Dispose(). Declaration public AudioAssets Retain() Returns Type Description AudioAssets This object SoundBank(String, String) Opens the file sound bank reader for the given sound bank name. The path to the file is looked up from the configuration file. Declaration public BNKReader SoundBank(string soundBankName, string language = null) Parameters Type Name Description String soundBankName The name of the sound bank file; a caseless match is used String language A language specifier, to select from the alternatives; if NULL the first bank found (without regard to its language) is used. (Ignored for now). Returns Type Description BNKReader null on error, otherwise the sound bank reader Remarks The banks can be localized, but there isn't any reason here StringForID(UInt32) Looks up a string for an AudioKinetic WWise ID. (This only works if the name was previously used to compute the ID). Declaration public static string StringForID(uint ID) Parameters Type Name Description UInt32 ID A 32-bit ID Returns Type Description String null, if the string is not known; otherwis the string that produces the ID WEM(UInt32, String) Opens the WEM file corresponding to the given file ID. The file may be embedded within the soundbank file, or may be external. Declaration public WEMReader WEM(uint fileID, string language = null) Parameters Type Name Description UInt32 fileID The identifier for the WEM to retrieve String language A language specifier, to select from the alternatives; if NULL the first bank found (without regard to its language) is used. (Ignored for now). Returns Type Description WEMReader An object that can read the WEM file Remarks This scans all of the sound banks until it finds one Implements System.IDisposable"
  },
  "api/Anki.AudioKinetic.BNKReader.html": {
    "href": "api/Anki.AudioKinetic.BNKReader.html",
    "title": "Class BNKReader | Resources SDK",
    "keywords": "Class BNKReader This class is used to scan sound bank (BNK) files. These are containers of many \"assets\" used to create sounds in response to dynamic game play. Inheritance Object BNKReader Implements IDisposable Namespace : Anki.AudioKinetic Assembly : Anki.Resources.SDK.dll Syntax public class BNKReader : IDisposable Remarks The audio bus hierarchy A sound bank has setups for how the sounds flow from files (and other inputs), thru mixers, and other filters to the output. Sound effects Music compositions These probably are used heavily in Cozmo, but appear unused in Vector State transition management How altering the settings of effects during play. Audio events & actions A map of audio events to the actions to carry out when that event occurs, such as playing a sound, stopping other sounds, changing mixer settings, and so on Other sound banks The set of other sound bank files to load. Sounds WEM sound files, either embedded, or a reference to an external file. Examples You can pipe the sounds into NAudio using code like: var WEM = soundBank.WEM( .. the id for the sound ..) var waveOut = new WaveOut(); var waveProvider = WEM.WaveProvider(); waveOut.Init(waveProvider); waveOut.Play(); Thread.Sleep(30000); waveOut.Stop(); waveProvider.Dispose(); waveOut.Dispose(); Properties Events This is used to enumerate the names and id of events used in the sound bank file. Audio events are sent to \"apply actions to the different sound objects or object groups.. The actions you select specify whether the Wwise objects will play, stop, pause, .. mute, set volume, enable effect bypass, and so on.” Declaration public IEnumerable<EventInfo> Events { get; } Property Value Type Description IEnumerable < EventInfo > A descriptor of the events Sounds This is used to enumerate the names and id of sounds used in the sound bank file Declaration public IEnumerable<FileInfo> Sounds { get; } Property Value Type Description IEnumerable < FileInfo > A descriptor of the file, including its ids Methods Dispose() Dispose of any internal resources. Declaration public void Dispose() Dispose(Boolean) Dispose of the binary stream. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Retain() Increment the reference count for this object. Decrement the count using Dispose(). Declaration public BNKReader Retain() Returns Type Description BNKReader This object WEM(UInt32) Look up a WEM audio file object for the given file id Declaration public WEMReader WEM(uint WEMFileId) Parameters Type Name Description UInt32 WEMFileId The identifier of the WEM file to retrieve Returns Type Description WEMReader null on error, otherwise the object to access the file Remarks The Data Index section is a table of file identifiers and their positions/sizes embedded in the data segment. Implements System.IDisposable"
  },
  "api/Anki.AudioKinetic.EventInfo.html": {
    "href": "api/Anki.AudioKinetic.EventInfo.html",
    "title": "Class EventInfo | Resources SDK",
    "keywords": "Class EventInfo This is information on events that can be sent to the audio subsystem. Audio events are sent to \"apply actions to the different sound objects or object groups.. The actions you select specify whether the Wwise objects will play, stop, pause, .. mute, set volume, enable effect bypass, and so on.” Inheritance Object EventInfo Namespace : Anki.AudioKinetic Assembly : Anki.Resources.SDK.dll Syntax public class EventInfo Properties EventActions This maps the event to the set of actions for this event Declaration public IReadOnlyList<uint> EventActions { get; } Property Value Type Description IReadOnlyList < UInt32 > Name This is the event name or id; a string if it is known, otherwise a string Declaration public object Name { get; } Property Value Type Description Object ObjectPath This is a path within the workspace to the audio file Declaration public string ObjectPath { get; } Property Value Type Description String Remarks This is left from the audio editing workspace SoundBankName The name of the sound bank that it is part of Declaration public string SoundBankName { get; } Property Value Type Description String"
  },
  "api/Anki.AudioKinetic.FileInfo.html": {
    "href": "api/Anki.AudioKinetic.FileInfo.html",
    "title": "Class FileInfo | Resources SDK",
    "keywords": "Class FileInfo This is information on the sound files within a sound bank Inheritance Object FileInfo Namespace : Anki.AudioKinetic Assembly : Anki.Resources.SDK.dll Syntax public class FileInfo Properties ID This is the stream id for the file. Declaration public uint ID { get; } Property Value Type Description UInt32 Offset The offset to where the WEM sound file can be found within the soundbank file. Declaration public uint Offset { get; } Property Value Type Description UInt32 Path This is a path within the workspace to the audio file Declaration public string Path { get; } Property Value Type Description String Remarks This is left from the audio editing workspace PrefetchSize If non-zero, the file should be prefetched so that there is no latency. The number of bytes to prefetch from the soundbank before heading out the external file? Declaration public uint PrefetchSize { get; } Property Value Type Description UInt32 ShortName This is the name of the source file Declaration public string ShortName { get; } Property Value Type Description String Remarks This is left from the audio editing workspace Size The size of the sound file segment within the soundbank file Declaration public uint Size { get; } Property Value Type Description UInt32 SoundBankName The name of the sound bank that it is part of Declaration public string SoundBankName { get; } Property Value Type Description String"
  },
  "api/Anki.AudioKinetic.html": {
    "href": "api/Anki.AudioKinetic.html",
    "title": "| Resources SDK",
    "keywords": "Classes AudioAssets This class is used to wrap the audio assets in Vector and Cozmo. These assets are Audio-Kinetic WWise soundbank files and other supporting files. BNKReader This class is used to scan sound bank (BNK) files. These are containers of many \"assets\" used to create sounds in response to dynamic game play. EventInfo This is information on events that can be sent to the audio subsystem. Audio events are sent to \"apply actions to the different sound objects or object groups.. The actions you select specify whether the Wwise objects will play, stop, pause, .. mute, set volume, enable effect bypass, and so on.” FileInfo This is information on the sound files within a sound bank IMAWaveProvider A helper to stream the WWise encoded IMA WEMReader This is used to open up the WEM audio files and WEM segment in the SoundBank (BNK) file and setup something that NAudio can access."
  },
  "api/Anki.AudioKinetic.IMAWaveProvider.html": {
    "href": "api/Anki.AudioKinetic.IMAWaveProvider.html",
    "title": "Class IMAWaveProvider | Resources SDK",
    "keywords": "Class IMAWaveProvider A helper to stream the WWise encoded IMA Inheritance Object IMAWaveProvider Implements NAudio.Wave.IWaveProvider IDisposable Namespace : Anki.AudioKinetic Assembly : Anki.Resources.SDK.dll Syntax public class IMAWaveProvider : IWaveProvider, IDisposable Properties WaveFormat Provides the wave format Declaration public WaveFormat WaveFormat { get; } Property Value Type Description NAudio.Wave.WaveFormat Methods Dispose() Disposes the reader stream Declaration public void Dispose() Dispose(Boolean) Disposes the reader stream Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Read(Byte[], Int32, Int32) Declaration public int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count Returns Type Description Int32 SetWaveFormat(Int32, Int32) Sets the wave format Declaration public void SetWaveFormat(int sampleRate, int numChannels) Parameters Type Name Description Int32 sampleRate Int32 numChannels Implements NAudio.Wave.IWaveProvider System.IDisposable"
  },
  "api/Anki.AudioKinetic.WEMReader.html": {
    "href": "api/Anki.AudioKinetic.WEMReader.html",
    "title": "Class WEMReader | Resources SDK",
    "keywords": "Class WEMReader This is used to open up the WEM audio files and WEM segment in the SoundBank (BNK) file and setup something that NAudio can access. Inheritance Object WEMReader Implements IDisposable Namespace : Anki.AudioKinetic Assembly : Anki.Resources.SDK.dll Syntax public class WEMReader : IDisposable Remarks A lot of the format info came from: http://bobdoleowndu.github.io/mgsv/documentation/soundswapping.html VGMStream's WWise support Making this a kind of plug-in/extension to NAudio was done because it is NAudio is ubiquitous, powerful in ways that matter. There is an existing framework (NVorbis) that we use here -- similar to how vgmstream uses libvorbis -- to decode the audiostream from Cozmo resources. By integrating with NAudio, it is easy to hook into Anki.Vector.SDK, and many other potential programs without learning new tricks. Examples You can pipe the sounds into NAudio using code like: var WEM = new WEMReader(\"some path to a .wem\"); WEM.Open(); var waveOut = new WaveOut(); var waveProvider = WEM.WaveProvider(); waveOut.Init(waveProvider); waveOut.Play(); Thread.Sleep(30000); waveOut.Stop(); waveProvider.Dispose(); waveOut.Dispose(); Constructors WEMReader(Stream) Provides access the a WEM sound file or segment Declaration public WEMReader(Stream stream) Parameters Type Name Description Stream stream Stream with the sound file embedded Remarks Call Open() to begin reading the file WEMReader(String) Provides access the a WEM sound file Declaration public WEMReader(string filePath) Parameters Type Name Description String filePath The path to the sound file Remarks Call Open() to begin reading the file Properties AudioFormat The Audio format of the encapsulated data. Declaration public uint AudioFormat { get; } Property Value Type Description UInt32 Remarks value Description 0xffff WWise's Vorbis stream, using Tremor (fixed-point Vorbis) 0x0002 WWise IMA ADPCM AvgBytesPerSec The average number of bytes per second Declaration public uint AvgBytesPerSec { get; } Property Value Type Description UInt32 BitsPerSample The number of bits per sample Declaration public uint BitsPerSample { get; } Property Value Type Description UInt32 BlockAlign The block alignment Declaration public uint BlockAlign { get; } Property Value Type Description UInt32 Duration An estimate the duration of the sound, in seconds. (0 on error) Declaration public float Duration { get; } Property Value Type Description Single NumChannels The number of channels in the audio file Declaration public uint NumChannels { get; } Property Value Type Description UInt32 SampleRate The number of samples per second from audio file Declaration public uint SampleRate { get; } Property Value Type Description UInt32 Methods DataStream() Returns a stream of the data for the sound, in its format Declaration public Stream DataStream() Returns Type Description Stream null on error, otherwise a stream of the data Dispose() Dispose of any extra resources Declaration public void Dispose() Dispose(Boolean) Dispose fo the binary stream Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Open() Opens the file and checks out its basic format Declaration public bool Open() Returns Type Description Boolean false if there was an error, true if the file was opened successfully WaveProvider() This provides an NAudio WaveProvider that can be used to play this file Declaration public IWaveProvider WaveProvider() Returns Type Description NAudio.Wave.IWaveProvider null on error, otherwise a wave provider Examples var waveOut = new WaveOut(); var waveProvider = WEM.WaveProvider(); waveOut.Init(waveProvider); waveOut.Play(); Thread.Sleep(30000); waveOut.Stop(); waveProvider.Dispose(); waveOut.Dispose(); Implements System.IDisposable"
  },
  "api/Anki.AudioKinetic.XML.File.html": {
    "href": "api/Anki.AudioKinetic.XML.File.html",
    "title": "Class File | Resources SDK",
    "keywords": "Class File Inheritance Object File Namespace : Anki.AudioKinetic.XML Assembly : Anki.Resources.SDK.dll Syntax [Serializable] public class File Properties Id Declaration public uint Id { get; set; } Property Value Type Description UInt32 Language Declaration public string Language { get; set; } Property Value Type Description String Path Declaration public string Path { get; set; } Property Value Type Description String PrefetchSize Declaration public uint PrefetchSize { get; set; } Property Value Type Description UInt32 ShortName Declaration public string ShortName { get; set; } Property Value Type Description String"
  },
  "api/Anki.AudioKinetic.XML.html": {
    "href": "api/Anki.AudioKinetic.XML.html",
    "title": "| Resources SDK",
    "keywords": "Classes File PluginInfo PluginInfoPluginsPlugin SoundBanksInfo SoundBanksInfoRootPaths SoundBanksInfoSoundBanksSoundBank SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent"
  },
  "api/Anki.AudioKinetic.XML.PluginInfo.html": {
    "href": "api/Anki.AudioKinetic.XML.PluginInfo.html",
    "title": "Class PluginInfo | Resources SDK",
    "keywords": "Class PluginInfo Inheritance Object PluginInfo Namespace : Anki.AudioKinetic.XML Assembly : Anki.Resources.SDK.dll Syntax [Serializable] public class PluginInfo Properties BasePlatform Declaration public string BasePlatform { get; set; } Property Value Type Description String Platform Declaration public string Platform { get; set; } Property Value Type Description String Plugins Declaration public PluginInfoPluginsPlugin[] Plugins { get; set; } Property Value Type Description PluginInfoPluginsPlugin [] Project Declaration public string Project { get; set; } Property Value Type Description String"
  },
  "api/Anki.AudioKinetic.XML.PluginInfoPluginsPlugin.html": {
    "href": "api/Anki.AudioKinetic.XML.PluginInfoPluginsPlugin.html",
    "title": "Class PluginInfoPluginsPlugin | Resources SDK",
    "keywords": "Class PluginInfoPluginsPlugin Inheritance Object PluginInfoPluginsPlugin Namespace : Anki.AudioKinetic.XML Assembly : Anki.Resources.SDK.dll Syntax [Serializable] public class PluginInfoPluginsPlugin Properties DLL Declaration public string DLL { get; set; } Property Value Type Description String ID Declaration public string ID { get; set; } Property Value Type Description String Name Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "api/Anki.AudioKinetic.XML.SoundBanksInfo.html": {
    "href": "api/Anki.AudioKinetic.XML.SoundBanksInfo.html",
    "title": "Class SoundBanksInfo | Resources SDK",
    "keywords": "Class SoundBanksInfo Inheritance Object SoundBanksInfo Namespace : Anki.AudioKinetic.XML Assembly : Anki.Resources.SDK.dll Syntax [Serializable] public class SoundBanksInfo Properties BasePlatform Declaration public string BasePlatform { get; set; } Property Value Type Description String DialogueEvents Declaration public string DialogueEvents { get; set; } Property Value Type Description String MediaFilesNotInAnyBank Declaration public string MediaFilesNotInAnyBank { get; set; } Property Value Type Description String Platform Declaration public string Platform { get; set; } Property Value Type Description String RootPaths Declaration public SoundBanksInfoRootPaths[] RootPaths { get; set; } Property Value Type Description SoundBanksInfoRootPaths [] SchemaVersion Declaration public string SchemaVersion { get; set; } Property Value Type Description String SoundBanks Declaration public SoundBanksInfoSoundBanksSoundBank[] SoundBanks { get; set; } Property Value Type Description SoundBanksInfoSoundBanksSoundBank [] SoundbankVersion Declaration public string SoundbankVersion { get; set; } Property Value Type Description String StreamedFiles Declaration public File[] StreamedFiles { get; set; } Property Value Type Description File []"
  },
  "api/Anki.AudioKinetic.XML.SoundBanksInfoRootPaths.html": {
    "href": "api/Anki.AudioKinetic.XML.SoundBanksInfoRootPaths.html",
    "title": "Class SoundBanksInfoRootPaths | Resources SDK",
    "keywords": "Class SoundBanksInfoRootPaths Inheritance Object SoundBanksInfoRootPaths Namespace : Anki.AudioKinetic.XML Assembly : Anki.Resources.SDK.dll Syntax [Serializable] public class SoundBanksInfoRootPaths Properties ExternalSourcesInputFile Declaration public string ExternalSourcesInputFile { get; set; } Property Value Type Description String ExternalSourcesOutputRoot Declaration public string ExternalSourcesOutputRoot { get; set; } Property Value Type Description String ProjectRoot Declaration public string ProjectRoot { get; set; } Property Value Type Description String SoundBanksRoot Declaration public string SoundBanksRoot { get; set; } Property Value Type Description String SourceFilesRoot Declaration public string SourceFilesRoot { get; set; } Property Value Type Description String"
  },
  "api/Anki.AudioKinetic.XML.SoundBanksInfoSoundBanksSoundBank.html": {
    "href": "api/Anki.AudioKinetic.XML.SoundBanksInfoSoundBanksSoundBank.html",
    "title": "Class SoundBanksInfoSoundBanksSoundBank | Resources SDK",
    "keywords": "Class SoundBanksInfoSoundBanksSoundBank Inheritance Object SoundBanksInfoSoundBanksSoundBank Namespace : Anki.AudioKinetic.XML Assembly : Anki.Resources.SDK.dll Syntax [Serializable] public class SoundBanksInfoSoundBanksSoundBank Properties Id Declaration public string Id { get; set; } Property Value Type Description String IncludedEvents Declaration public SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent[] IncludedEvents { get; set; } Property Value Type Description SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent [] IncludedMemoryFiles Declaration public File[] IncludedMemoryFiles { get; set; } Property Value Type Description File [] Language Declaration public string Language { get; set; } Property Value Type Description String ObjectPath Declaration public string ObjectPath { get; set; } Property Value Type Description String Path Declaration public string Path { get; set; } Property Value Type Description String ReferencedStreamedFiles Declaration public File[] ReferencedStreamedFiles { get; set; } Property Value Type Description File [] ShortName Declaration public string ShortName { get; set; } Property Value Type Description String"
  },
  "api/Anki.AudioKinetic.XML.SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent.html": {
    "href": "api/Anki.AudioKinetic.XML.SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent.html",
    "title": "Class SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent | Resources SDK",
    "keywords": "Class SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent Inheritance Object SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent Namespace : Anki.AudioKinetic.XML Assembly : Anki.Resources.SDK.dll Syntax [Serializable] public class SoundBanksInfoSoundBanksSoundBankIncludedEventsEvent Properties Id Declaration public string Id { get; set; } Property Value Type Description String Name Declaration public string Name { get; set; } Property Value Type Description String ObjectPath Declaration public string ObjectPath { get; set; } Property Value Type Description String"
  },
  "api/Anki.CozmoAnim.AnimClip.html": {
    "href": "api/Anki.CozmoAnim.AnimClip.html",
    "title": "Struct AnimClip | Resources SDK",
    "keywords": "Struct AnimClip Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.CozmoAnim Assembly : Anki.Resources.SDK.dll Syntax public struct AnimClip : IFlatbufferObject Properties ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer Keyframes Declaration public Keyframes? Keyframes { get; } Property Value Type Description Nullable < Keyframes > Name Declaration public string Name { get; } Property Value Type Description String Methods __assign(Int32, ByteBuffer) Declaration public AnimClip __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description AnimClip __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddKeyframes(FlatBufferBuilder, Offset<Keyframes>) Declaration public static void AddKeyframes(FlatBufferBuilder builder, Offset<Keyframes> keyframesOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < Keyframes > keyframesOffset AddName(FlatBufferBuilder, StringOffset) Declaration public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.StringOffset NameOffset CreateAnimClip(FlatBufferBuilder, StringOffset, Offset<Keyframes>) Declaration public static Offset<AnimClip> CreateAnimClip(FlatBufferBuilder builder, StringOffset NameOffset = default(StringOffset), Offset<Keyframes> keyframesOffset = default(Offset<Keyframes>)) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.StringOffset NameOffset FlatBuffers.Offset < Keyframes > keyframesOffset Returns Type Description FlatBuffers.Offset < AnimClip > EndAnimClip(FlatBufferBuilder) Declaration public static Offset<AnimClip> EndAnimClip(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < AnimClip > GetNameArray() Declaration public byte[] GetNameArray() Returns Type Description Byte [] GetNameBytes() Declaration public ArraySegment<byte>? GetNameBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetRootAsAnimClip(ByteBuffer) Declaration public static AnimClip GetRootAsAnimClip(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description AnimClip GetRootAsAnimClip(ByteBuffer, AnimClip) Declaration public static AnimClip GetRootAsAnimClip(ByteBuffer _bb, AnimClip obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb AnimClip obj Returns Type Description AnimClip StartAnimClip(FlatBufferBuilder) Declaration public static void StartAnimClip(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.CozmoAnim.AnimClips.html": {
    "href": "api/Anki.CozmoAnim.AnimClips.html",
    "title": "Struct AnimClips | Resources SDK",
    "keywords": "Struct AnimClips Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.CozmoAnim Assembly : Anki.Resources.SDK.dll Syntax public struct AnimClips : IFlatbufferObject Properties ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer ClipsLength Declaration public int ClipsLength { get; } Property Value Type Description Int32 Methods __assign(Int32, ByteBuffer) Declaration public AnimClips __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description AnimClips __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddClips(FlatBufferBuilder, VectorOffset) Declaration public static void AddClips(FlatBufferBuilder builder, VectorOffset clipsOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset clipsOffset Clips(Int32) Declaration public AnimClip? Clips(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < AnimClip > CreateAnimClips(FlatBufferBuilder, VectorOffset) Declaration public static Offset<AnimClips> CreateAnimClips(FlatBufferBuilder builder, VectorOffset clipsOffset = default(VectorOffset)) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset clipsOffset Returns Type Description FlatBuffers.Offset < AnimClips > CreateClipsVector(FlatBufferBuilder, Offset<AnimClip>[]) Declaration public static VectorOffset CreateClipsVector(FlatBufferBuilder builder, Offset<AnimClip>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < AnimClip >[] data Returns Type Description FlatBuffers.VectorOffset CreateClipsVectorBlock(FlatBufferBuilder, Offset<AnimClip>[]) Declaration public static VectorOffset CreateClipsVectorBlock(FlatBufferBuilder builder, Offset<AnimClip>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < AnimClip >[] data Returns Type Description FlatBuffers.VectorOffset EndAnimClips(FlatBufferBuilder) Declaration public static Offset<AnimClips> EndAnimClips(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < AnimClips > FinishAnimClipsBuffer(FlatBufferBuilder, Offset<AnimClips>) Declaration public static void FinishAnimClipsBuffer(FlatBufferBuilder builder, Offset<AnimClips> offset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < AnimClips > offset FinishSizePrefixedAnimClipsBuffer(FlatBufferBuilder, Offset<AnimClips>) Declaration public static void FinishSizePrefixedAnimClipsBuffer(FlatBufferBuilder builder, Offset<AnimClips> offset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < AnimClips > offset GetRootAsAnimClips(ByteBuffer) Declaration public static AnimClips GetRootAsAnimClips(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description AnimClips GetRootAsAnimClips(ByteBuffer, AnimClips) Declaration public static AnimClips GetRootAsAnimClips(ByteBuffer _bb, AnimClips obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb AnimClips obj Returns Type Description AnimClips StartAnimClips(FlatBufferBuilder) Declaration public static void StartAnimClips(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder StartClipsVector(FlatBufferBuilder, Int32) Declaration public static void StartClipsVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.CozmoAnim.BackpackLights.html": {
    "href": "api/Anki.CozmoAnim.BackpackLights.html",
    "title": "Struct BackpackLights | Resources SDK",
    "keywords": "Struct BackpackLights Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.CozmoAnim Assembly : Anki.Resources.SDK.dll Syntax public struct BackpackLights : IFlatbufferObject Properties BackLength Declaration public int BackLength { get; } Property Value Type Description Int32 ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer DurationTimeMs Declaration public uint DurationTimeMs { get; } Property Value Type Description UInt32 FrontLength Declaration public int FrontLength { get; } Property Value Type Description Int32 LeftLength Declaration public int LeftLength { get; } Property Value Type Description Int32 MiddleLength Declaration public int MiddleLength { get; } Property Value Type Description Int32 RightLength Declaration public int RightLength { get; } Property Value Type Description Int32 TriggerTimeMs Declaration public uint TriggerTimeMs { get; } Property Value Type Description UInt32 Methods __assign(Int32, ByteBuffer) Declaration public BackpackLights __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description BackpackLights __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddBack(FlatBufferBuilder, VectorOffset) Declaration public static void AddBack(FlatBufferBuilder builder, VectorOffset BackOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset BackOffset AddDurationTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddDurationTimeMs(FlatBufferBuilder builder, uint durationTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 durationTimeMs AddFront(FlatBufferBuilder, VectorOffset) Declaration public static void AddFront(FlatBufferBuilder builder, VectorOffset FrontOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset FrontOffset AddLeft(FlatBufferBuilder, VectorOffset) Declaration public static void AddLeft(FlatBufferBuilder builder, VectorOffset LeftOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset LeftOffset AddMiddle(FlatBufferBuilder, VectorOffset) Declaration public static void AddMiddle(FlatBufferBuilder builder, VectorOffset MiddleOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset MiddleOffset AddRight(FlatBufferBuilder, VectorOffset) Declaration public static void AddRight(FlatBufferBuilder builder, VectorOffset RightOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset RightOffset AddTriggerTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTimeMs Back(Int32) Declaration public float Back(int j) Parameters Type Name Description Int32 j Returns Type Description Single CreateBackpackLights(FlatBufferBuilder, UInt32, UInt32, VectorOffset, VectorOffset, VectorOffset, VectorOffset, VectorOffset) Declaration public static Offset<BackpackLights> CreateBackpackLights(FlatBufferBuilder builder, uint triggerTime_ms = 0U, uint durationTime_ms = 0U, VectorOffset LeftOffset = default(VectorOffset), VectorOffset RightOffset = default(VectorOffset), VectorOffset FrontOffset = default(VectorOffset), VectorOffset MiddleOffset = default(VectorOffset), VectorOffset BackOffset = default(VectorOffset)) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTime_ms UInt32 durationTime_ms FlatBuffers.VectorOffset LeftOffset FlatBuffers.VectorOffset RightOffset FlatBuffers.VectorOffset FrontOffset FlatBuffers.VectorOffset MiddleOffset FlatBuffers.VectorOffset BackOffset Returns Type Description FlatBuffers.Offset < BackpackLights > CreateBackVector(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateBackVector(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateBackVectorBlock(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateBackVectorBlock(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateFrontVector(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateFrontVector(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateFrontVectorBlock(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateFrontVectorBlock(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateLeftVector(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateLeftVector(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateLeftVectorBlock(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateLeftVectorBlock(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateMiddleVector(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateMiddleVector(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateMiddleVectorBlock(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateMiddleVectorBlock(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateRightVector(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateRightVector(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateRightVectorBlock(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateRightVectorBlock(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset EndBackpackLights(FlatBufferBuilder) Declaration public static Offset<BackpackLights> EndBackpackLights(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < BackpackLights > Front(Int32) Declaration public float Front(int j) Parameters Type Name Description Int32 j Returns Type Description Single GetBackArray() Declaration public float[] GetBackArray() Returns Type Description Single [] GetBackBytes() Declaration public ArraySegment<byte>? GetBackBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetFrontArray() Declaration public float[] GetFrontArray() Returns Type Description Single [] GetFrontBytes() Declaration public ArraySegment<byte>? GetFrontBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetLeftArray() Declaration public float[] GetLeftArray() Returns Type Description Single [] GetLeftBytes() Declaration public ArraySegment<byte>? GetLeftBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetMiddleArray() Declaration public float[] GetMiddleArray() Returns Type Description Single [] GetMiddleBytes() Declaration public ArraySegment<byte>? GetMiddleBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetRightArray() Declaration public float[] GetRightArray() Returns Type Description Single [] GetRightBytes() Declaration public ArraySegment<byte>? GetRightBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetRootAsBackpackLights(ByteBuffer) Declaration public static BackpackLights GetRootAsBackpackLights(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description BackpackLights GetRootAsBackpackLights(ByteBuffer, BackpackLights) Declaration public static BackpackLights GetRootAsBackpackLights(ByteBuffer _bb, BackpackLights obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb BackpackLights obj Returns Type Description BackpackLights Left(Int32) Declaration public float Left(int j) Parameters Type Name Description Int32 j Returns Type Description Single Middle(Int32) Declaration public float Middle(int j) Parameters Type Name Description Int32 j Returns Type Description Single Right(Int32) Declaration public float Right(int j) Parameters Type Name Description Int32 j Returns Type Description Single StartBackpackLights(FlatBufferBuilder) Declaration public static void StartBackpackLights(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder StartBackVector(FlatBufferBuilder, Int32) Declaration public static void StartBackVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartFrontVector(FlatBufferBuilder, Int32) Declaration public static void StartFrontVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartLeftVector(FlatBufferBuilder, Int32) Declaration public static void StartLeftVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartMiddleVector(FlatBufferBuilder, Int32) Declaration public static void StartMiddleVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartRightVector(FlatBufferBuilder, Int32) Declaration public static void StartRightVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.CozmoAnim.BodyMotion.html": {
    "href": "api/Anki.CozmoAnim.BodyMotion.html",
    "title": "Struct BodyMotion | Resources SDK",
    "keywords": "Struct BodyMotion The BodyMotion structure is used to specify driving motions. Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.CozmoAnim Assembly : Anki.Resources.SDK.dll Syntax public struct BodyMotion : IFlatbufferObject Properties ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer DurationTimeMs The duration that the robot should drive. Declaration public uint DurationTimeMs { get; } Property Value Type Description UInt32 RadiusMm Declaration public string RadiusMm { get; } Property Value Type Description String Speed The speed at which the robot should move. Declaration public short Speed { get; } Property Value Type Description Int16 TriggerTimeMs The time at which the motion should begin Declaration public uint TriggerTimeMs { get; } Property Value Type Description UInt32 Methods __assign(Int32, ByteBuffer) Declaration public BodyMotion __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description BodyMotion __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddDurationTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddDurationTimeMs(FlatBufferBuilder builder, uint durationTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 durationTimeMs AddRadiusMm(FlatBufferBuilder, StringOffset) Declaration public static void AddRadiusMm(FlatBufferBuilder builder, StringOffset radiusMmOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.StringOffset radiusMmOffset AddSpeed(FlatBufferBuilder, Int16) Declaration public static void AddSpeed(FlatBufferBuilder builder, short speed) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int16 speed AddTriggerTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTimeMs CreateBodyMotion(FlatBufferBuilder, UInt32, UInt32, StringOffset, Int16) Declaration public static Offset<BodyMotion> CreateBodyMotion(FlatBufferBuilder builder, uint triggerTime_ms = 0U, uint durationTime_ms = 0U, StringOffset radius_mmOffset = default(StringOffset), short speed = 0) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTime_ms UInt32 durationTime_ms FlatBuffers.StringOffset radius_mmOffset Int16 speed Returns Type Description FlatBuffers.Offset < BodyMotion > EndBodyMotion(FlatBufferBuilder) Declaration public static Offset<BodyMotion> EndBodyMotion(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < BodyMotion > GetRadiusMmArray() Declaration public byte[] GetRadiusMmArray() Returns Type Description Byte [] GetRadiusMmBytes() Declaration public ArraySegment<byte>? GetRadiusMmBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetRootAsBodyMotion(ByteBuffer) Declaration public static BodyMotion GetRootAsBodyMotion(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description BodyMotion GetRootAsBodyMotion(ByteBuffer, BodyMotion) Declaration public static BodyMotion GetRootAsBodyMotion(ByteBuffer _bb, BodyMotion obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb BodyMotion obj Returns Type Description BodyMotion StartBodyMotion(FlatBufferBuilder) Declaration public static void StartBodyMotion(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.CozmoAnim.Event.html": {
    "href": "api/Anki.CozmoAnim.Event.html",
    "title": "Struct Event | Resources SDK",
    "keywords": "Struct Event The Event structure is used to pause the animation at the given time code until the event is received or cancelled. When the event is received, the animation resumes the given time code. Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.CozmoAnim Assembly : Anki.Resources.SDK.dll Syntax public struct Event : IFlatbufferObject Properties ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer EventId The name of the event to wait for. Required Declaration public string EventId { get; } Property Value Type Description String TriggerTimeMs The animation is paused at this time, until it receives the event. Once the event is received, the animation is resumed from this point in time. Declaration public uint TriggerTimeMs { get; } Property Value Type Description UInt32 Methods __assign(Int32, ByteBuffer) Declaration public Event __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description Event __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddEventId(FlatBufferBuilder, StringOffset) Declaration public static void AddEventId(FlatBufferBuilder builder, StringOffset eventIdOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.StringOffset eventIdOffset AddTriggerTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTimeMs CreateEvent(FlatBufferBuilder, UInt32, StringOffset) Declaration public static Offset<Event> CreateEvent(FlatBufferBuilder builder, uint triggerTime_ms = 0U, StringOffset event_idOffset = default(StringOffset)) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTime_ms FlatBuffers.StringOffset event_idOffset Returns Type Description FlatBuffers.Offset < Event > EndEvent(FlatBufferBuilder) Declaration public static Offset<Event> EndEvent(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < Event > GetEventIdArray() Declaration public byte[] GetEventIdArray() Returns Type Description Byte [] GetEventIdBytes() Declaration public ArraySegment<byte>? GetEventIdBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetRootAsEvent(ByteBuffer) Declaration public static Event GetRootAsEvent(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description Event GetRootAsEvent(ByteBuffer, Event) Declaration public static Event GetRootAsEvent(ByteBuffer _bb, Event obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Event obj Returns Type Description Event StartEvent(FlatBufferBuilder) Declaration public static void StartEvent(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.CozmoAnim.FaceAnimation.html": {
    "href": "api/Anki.CozmoAnim.FaceAnimation.html",
    "title": "Struct FaceAnimation | Resources SDK",
    "keywords": "Struct FaceAnimation Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.CozmoAnim Assembly : Anki.Resources.SDK.dll Syntax public struct FaceAnimation : IFlatbufferObject Properties AnimName Declaration public string AnimName { get; } Property Value Type Description String ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer TriggerTimeMs Declaration public uint TriggerTimeMs { get; } Property Value Type Description UInt32 Methods __assign(Int32, ByteBuffer) Declaration public FaceAnimation __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description FaceAnimation __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddAnimName(FlatBufferBuilder, StringOffset) Declaration public static void AddAnimName(FlatBufferBuilder builder, StringOffset animNameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.StringOffset animNameOffset AddTriggerTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTimeMs CreateFaceAnimation(FlatBufferBuilder, UInt32, StringOffset) Declaration public static Offset<FaceAnimation> CreateFaceAnimation(FlatBufferBuilder builder, uint triggerTime_ms = 0U, StringOffset animNameOffset = default(StringOffset)) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTime_ms FlatBuffers.StringOffset animNameOffset Returns Type Description FlatBuffers.Offset < FaceAnimation > EndFaceAnimation(FlatBufferBuilder) Declaration public static Offset<FaceAnimation> EndFaceAnimation(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < FaceAnimation > GetAnimNameArray() Declaration public byte[] GetAnimNameArray() Returns Type Description Byte [] GetAnimNameBytes() Declaration public ArraySegment<byte>? GetAnimNameBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetRootAsFaceAnimation(ByteBuffer) Declaration public static FaceAnimation GetRootAsFaceAnimation(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description FaceAnimation GetRootAsFaceAnimation(ByteBuffer, FaceAnimation) Declaration public static FaceAnimation GetRootAsFaceAnimation(ByteBuffer _bb, FaceAnimation obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb FaceAnimation obj Returns Type Description FaceAnimation StartFaceAnimation(FlatBufferBuilder) Declaration public static void StartFaceAnimation(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.CozmoAnim.HeadAngle.html": {
    "href": "api/Anki.CozmoAnim.HeadAngle.html",
    "title": "Struct HeadAngle | Resources SDK",
    "keywords": "Struct HeadAngle The HeadAngle structure is used to specify how to move Vector’s head. The head should reach the target angle in the duration given, ramping up the movement speed smoothly (with some variability) until it reaches that that point. Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.CozmoAnim Assembly : Anki.Resources.SDK.dll Syntax public struct HeadAngle : IFlatbufferObject Properties AngleDeg The angle to move the head to. This should be in the range -22.0° to 45.0°. Declaration public sbyte AngleDeg { get; } Property Value Type Description SByte AngleVariabilityDeg The amount of randomness allowed for the target head angle. Default: 0 Declaration public byte AngleVariabilityDeg { get; } Property Value Type Description Byte ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer DurationTimeMs How long the head motion should last. Declaration public uint DurationTimeMs { get; } Property Value Type Description UInt32 TriggerTimeMs The time at which the head motion should begin. Declaration public uint TriggerTimeMs { get; } Property Value Type Description UInt32 Methods __assign(Int32, ByteBuffer) Declaration public HeadAngle __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description HeadAngle __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddAngleDeg(FlatBufferBuilder, SByte) Declaration public static void AddAngleDeg(FlatBufferBuilder builder, sbyte angleDeg) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder SByte angleDeg AddAngleVariabilityDeg(FlatBufferBuilder, Byte) Declaration public static void AddAngleVariabilityDeg(FlatBufferBuilder builder, byte angleVariabilityDeg) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Byte angleVariabilityDeg AddDurationTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddDurationTimeMs(FlatBufferBuilder builder, uint durationTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 durationTimeMs AddTriggerTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTimeMs CreateHeadAngle(FlatBufferBuilder, UInt32, UInt32, SByte, Byte) Declaration public static Offset<HeadAngle> CreateHeadAngle(FlatBufferBuilder builder, uint triggerTime_ms = 0U, uint durationTime_ms = 0U, sbyte angle_deg = 0, byte angleVariability_deg = 0) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTime_ms UInt32 durationTime_ms SByte angle_deg Byte angleVariability_deg Returns Type Description FlatBuffers.Offset < HeadAngle > EndHeadAngle(FlatBufferBuilder) Declaration public static Offset<HeadAngle> EndHeadAngle(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < HeadAngle > GetRootAsHeadAngle(ByteBuffer) Declaration public static HeadAngle GetRootAsHeadAngle(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description HeadAngle GetRootAsHeadAngle(ByteBuffer, HeadAngle) Declaration public static HeadAngle GetRootAsHeadAngle(ByteBuffer _bb, HeadAngle obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb HeadAngle obj Returns Type Description HeadAngle StartHeadAngle(FlatBufferBuilder) Declaration public static void StartHeadAngle(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.CozmoAnim.html": {
    "href": "api/Anki.CozmoAnim.html",
    "title": "| Resources SDK",
    "keywords": "Structs AnimClip AnimClips BackpackLights BodyMotion The BodyMotion structure is used to specify driving motions. Event The Event structure is used to pause the animation at the given time code until the event is received or cancelled. When the event is received, the animation resumes the given time code. FaceAnimation HeadAngle The HeadAngle structure is used to specify how to move Vector’s head. The head should reach the target angle in the duration given, ramping up the movement speed smoothly (with some variability) until it reaches that that point. Keyframes LiftHeight The LiftHeight structure is used to specify how to move Vector’s lift. The lift should reach the target height in the duration given, ramping up the movement speed smoothly (with some variability) until it reaches that. ProceduralFace RecordHeading The RecordHeading structure is used to recording the robots heading, at the start of an animation. [or possibly after a randomized body motion?] RobotAudio TurnToRecordedHeading The TurnToRecordedHeading is used to specify how Vector should turn to the previously recorded heading. The robot reach the target heading in the duration given, ramping up the movement speed smoothly until it reaches that position (within some tolerance)."
  },
  "api/Anki.CozmoAnim.Keyframes.html": {
    "href": "api/Anki.CozmoAnim.Keyframes.html",
    "title": "Struct Keyframes | Resources SDK",
    "keywords": "Struct Keyframes Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.CozmoAnim Assembly : Anki.Resources.SDK.dll Syntax public struct Keyframes : IFlatbufferObject Properties BackpackLightsKeyFrameLength Declaration public int BackpackLightsKeyFrameLength { get; } Property Value Type Description Int32 BodyMotionKeyFrameLength Declaration public int BodyMotionKeyFrameLength { get; } Property Value Type Description Int32 ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer EventKeyFrameLength Declaration public int EventKeyFrameLength { get; } Property Value Type Description Int32 FaceAnimationKeyFrameLength Declaration public int FaceAnimationKeyFrameLength { get; } Property Value Type Description Int32 HeadAngleKeyFrameLength Declaration public int HeadAngleKeyFrameLength { get; } Property Value Type Description Int32 LiftHeightKeyFrameLength Declaration public int LiftHeightKeyFrameLength { get; } Property Value Type Description Int32 ProceduralFaceKeyFrameLength Declaration public int ProceduralFaceKeyFrameLength { get; } Property Value Type Description Int32 RecordHeadingKeyFrameLength Declaration public int RecordHeadingKeyFrameLength { get; } Property Value Type Description Int32 RobotAudioKeyFrameLength Declaration public int RobotAudioKeyFrameLength { get; } Property Value Type Description Int32 TurnToRecordedHeadingKeyFrameLength Declaration public int TurnToRecordedHeadingKeyFrameLength { get; } Property Value Type Description Int32 Methods __assign(Int32, ByteBuffer) Declaration public Keyframes __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description Keyframes __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddBackpackLightsKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddBackpackLightsKeyFrame(FlatBufferBuilder builder, VectorOffset BackpackLightsKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset BackpackLightsKeyFrameOffset AddBodyMotionKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddBodyMotionKeyFrame(FlatBufferBuilder builder, VectorOffset BodyMotionKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset BodyMotionKeyFrameOffset AddEventKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddEventKeyFrame(FlatBufferBuilder builder, VectorOffset EventKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset EventKeyFrameOffset AddFaceAnimationKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddFaceAnimationKeyFrame(FlatBufferBuilder builder, VectorOffset FaceAnimationKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset FaceAnimationKeyFrameOffset AddHeadAngleKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddHeadAngleKeyFrame(FlatBufferBuilder builder, VectorOffset HeadAngleKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset HeadAngleKeyFrameOffset AddLiftHeightKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddLiftHeightKeyFrame(FlatBufferBuilder builder, VectorOffset LiftHeightKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset LiftHeightKeyFrameOffset AddProceduralFaceKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddProceduralFaceKeyFrame(FlatBufferBuilder builder, VectorOffset ProceduralFaceKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset ProceduralFaceKeyFrameOffset AddRecordHeadingKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddRecordHeadingKeyFrame(FlatBufferBuilder builder, VectorOffset RecordHeadingKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset RecordHeadingKeyFrameOffset AddRobotAudioKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddRobotAudioKeyFrame(FlatBufferBuilder builder, VectorOffset RobotAudioKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset RobotAudioKeyFrameOffset AddTurnToRecordedHeadingKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddTurnToRecordedHeadingKeyFrame(FlatBufferBuilder builder, VectorOffset TurnToRecordedHeadingKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset TurnToRecordedHeadingKeyFrameOffset BackpackLightsKeyFrame(Int32) Declaration public BackpackLights? BackpackLightsKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < BackpackLights > BodyMotionKeyFrame(Int32) Declaration public BodyMotion? BodyMotionKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < BodyMotion > CreateBackpackLightsKeyFrameVector(FlatBufferBuilder, Offset<BackpackLights>[]) Declaration public static VectorOffset CreateBackpackLightsKeyFrameVector(FlatBufferBuilder builder, Offset<BackpackLights>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < BackpackLights >[] data Returns Type Description FlatBuffers.VectorOffset CreateBackpackLightsKeyFrameVectorBlock(FlatBufferBuilder, Offset<BackpackLights>[]) Declaration public static VectorOffset CreateBackpackLightsKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<BackpackLights>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < BackpackLights >[] data Returns Type Description FlatBuffers.VectorOffset CreateBodyMotionKeyFrameVector(FlatBufferBuilder, Offset<BodyMotion>[]) Declaration public static VectorOffset CreateBodyMotionKeyFrameVector(FlatBufferBuilder builder, Offset<BodyMotion>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < BodyMotion >[] data Returns Type Description FlatBuffers.VectorOffset CreateBodyMotionKeyFrameVectorBlock(FlatBufferBuilder, Offset<BodyMotion>[]) Declaration public static VectorOffset CreateBodyMotionKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<BodyMotion>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < BodyMotion >[] data Returns Type Description FlatBuffers.VectorOffset CreateEventKeyFrameVector(FlatBufferBuilder, Offset<Event>[]) Declaration public static VectorOffset CreateEventKeyFrameVector(FlatBufferBuilder builder, Offset<Event>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < Event >[] data Returns Type Description FlatBuffers.VectorOffset CreateEventKeyFrameVectorBlock(FlatBufferBuilder, Offset<Event>[]) Declaration public static VectorOffset CreateEventKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<Event>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < Event >[] data Returns Type Description FlatBuffers.VectorOffset CreateFaceAnimationKeyFrameVector(FlatBufferBuilder, Offset<FaceAnimation>[]) Declaration public static VectorOffset CreateFaceAnimationKeyFrameVector(FlatBufferBuilder builder, Offset<FaceAnimation>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < FaceAnimation >[] data Returns Type Description FlatBuffers.VectorOffset CreateFaceAnimationKeyFrameVectorBlock(FlatBufferBuilder, Offset<FaceAnimation>[]) Declaration public static VectorOffset CreateFaceAnimationKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<FaceAnimation>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < FaceAnimation >[] data Returns Type Description FlatBuffers.VectorOffset CreateHeadAngleKeyFrameVector(FlatBufferBuilder, Offset<HeadAngle>[]) Declaration public static VectorOffset CreateHeadAngleKeyFrameVector(FlatBufferBuilder builder, Offset<HeadAngle>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < HeadAngle >[] data Returns Type Description FlatBuffers.VectorOffset CreateHeadAngleKeyFrameVectorBlock(FlatBufferBuilder, Offset<HeadAngle>[]) Declaration public static VectorOffset CreateHeadAngleKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<HeadAngle>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < HeadAngle >[] data Returns Type Description FlatBuffers.VectorOffset CreateKeyframes(FlatBufferBuilder, VectorOffset, VectorOffset, VectorOffset, VectorOffset, VectorOffset, VectorOffset, VectorOffset, VectorOffset, VectorOffset, VectorOffset) Declaration public static Offset<Keyframes> CreateKeyframes(FlatBufferBuilder builder, VectorOffset LiftHeightKeyFrameOffset = default(VectorOffset), VectorOffset ProceduralFaceKeyFrameOffset = default(VectorOffset), VectorOffset HeadAngleKeyFrameOffset = default(VectorOffset), VectorOffset RobotAudioKeyFrameOffset = default(VectorOffset), VectorOffset BackpackLightsKeyFrameOffset = default(VectorOffset), VectorOffset FaceAnimationKeyFrameOffset = default(VectorOffset), VectorOffset EventKeyFrameOffset = default(VectorOffset), VectorOffset BodyMotionKeyFrameOffset = default(VectorOffset), VectorOffset RecordHeadingKeyFrameOffset = default(VectorOffset), VectorOffset TurnToRecordedHeadingKeyFrameOffset = default(VectorOffset)) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset LiftHeightKeyFrameOffset FlatBuffers.VectorOffset ProceduralFaceKeyFrameOffset FlatBuffers.VectorOffset HeadAngleKeyFrameOffset FlatBuffers.VectorOffset RobotAudioKeyFrameOffset FlatBuffers.VectorOffset BackpackLightsKeyFrameOffset FlatBuffers.VectorOffset FaceAnimationKeyFrameOffset FlatBuffers.VectorOffset EventKeyFrameOffset FlatBuffers.VectorOffset BodyMotionKeyFrameOffset FlatBuffers.VectorOffset RecordHeadingKeyFrameOffset FlatBuffers.VectorOffset TurnToRecordedHeadingKeyFrameOffset Returns Type Description FlatBuffers.Offset < Keyframes > CreateLiftHeightKeyFrameVector(FlatBufferBuilder, Offset<LiftHeight>[]) Declaration public static VectorOffset CreateLiftHeightKeyFrameVector(FlatBufferBuilder builder, Offset<LiftHeight>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < LiftHeight >[] data Returns Type Description FlatBuffers.VectorOffset CreateLiftHeightKeyFrameVectorBlock(FlatBufferBuilder, Offset<LiftHeight>[]) Declaration public static VectorOffset CreateLiftHeightKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<LiftHeight>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < LiftHeight >[] data Returns Type Description FlatBuffers.VectorOffset CreateProceduralFaceKeyFrameVector(FlatBufferBuilder, Offset<ProceduralFace>[]) Declaration public static VectorOffset CreateProceduralFaceKeyFrameVector(FlatBufferBuilder builder, Offset<ProceduralFace>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < ProceduralFace >[] data Returns Type Description FlatBuffers.VectorOffset CreateProceduralFaceKeyFrameVectorBlock(FlatBufferBuilder, Offset<ProceduralFace>[]) Declaration public static VectorOffset CreateProceduralFaceKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<ProceduralFace>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < ProceduralFace >[] data Returns Type Description FlatBuffers.VectorOffset CreateRecordHeadingKeyFrameVector(FlatBufferBuilder, Offset<RecordHeading>[]) Declaration public static VectorOffset CreateRecordHeadingKeyFrameVector(FlatBufferBuilder builder, Offset<RecordHeading>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < RecordHeading >[] data Returns Type Description FlatBuffers.VectorOffset CreateRecordHeadingKeyFrameVectorBlock(FlatBufferBuilder, Offset<RecordHeading>[]) Declaration public static VectorOffset CreateRecordHeadingKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<RecordHeading>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < RecordHeading >[] data Returns Type Description FlatBuffers.VectorOffset CreateRobotAudioKeyFrameVector(FlatBufferBuilder, Offset<RobotAudio>[]) Declaration public static VectorOffset CreateRobotAudioKeyFrameVector(FlatBufferBuilder builder, Offset<RobotAudio>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < RobotAudio >[] data Returns Type Description FlatBuffers.VectorOffset CreateRobotAudioKeyFrameVectorBlock(FlatBufferBuilder, Offset<RobotAudio>[]) Declaration public static VectorOffset CreateRobotAudioKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<RobotAudio>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < RobotAudio >[] data Returns Type Description FlatBuffers.VectorOffset CreateTurnToRecordedHeadingKeyFrameVector(FlatBufferBuilder, Offset<TurnToRecordedHeading>[]) Declaration public static VectorOffset CreateTurnToRecordedHeadingKeyFrameVector(FlatBufferBuilder builder, Offset<TurnToRecordedHeading>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < TurnToRecordedHeading >[] data Returns Type Description FlatBuffers.VectorOffset CreateTurnToRecordedHeadingKeyFrameVectorBlock(FlatBufferBuilder, Offset<TurnToRecordedHeading>[]) Declaration public static VectorOffset CreateTurnToRecordedHeadingKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<TurnToRecordedHeading>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < TurnToRecordedHeading >[] data Returns Type Description FlatBuffers.VectorOffset EndKeyframes(FlatBufferBuilder) Declaration public static Offset<Keyframes> EndKeyframes(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < Keyframes > EventKeyFrame(Int32) Declaration public Event? EventKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < Event > FaceAnimationKeyFrame(Int32) Declaration public FaceAnimation? FaceAnimationKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < FaceAnimation > GetRootAsKeyframes(ByteBuffer) Declaration public static Keyframes GetRootAsKeyframes(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description Keyframes GetRootAsKeyframes(ByteBuffer, Keyframes) Declaration public static Keyframes GetRootAsKeyframes(ByteBuffer _bb, Keyframes obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Keyframes obj Returns Type Description Keyframes HeadAngleKeyFrame(Int32) Declaration public HeadAngle? HeadAngleKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < HeadAngle > LiftHeightKeyFrame(Int32) Declaration public LiftHeight? LiftHeightKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < LiftHeight > ProceduralFaceKeyFrame(Int32) Declaration public ProceduralFace? ProceduralFaceKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < ProceduralFace > RecordHeadingKeyFrame(Int32) Declaration public RecordHeading? RecordHeadingKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < RecordHeading > RobotAudioKeyFrame(Int32) Declaration public RobotAudio? RobotAudioKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < RobotAudio > StartBackpackLightsKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartBackpackLightsKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartBodyMotionKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartBodyMotionKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartEventKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartEventKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartFaceAnimationKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartFaceAnimationKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartHeadAngleKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartHeadAngleKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartKeyframes(FlatBufferBuilder) Declaration public static void StartKeyframes(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder StartLiftHeightKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartLiftHeightKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartProceduralFaceKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartProceduralFaceKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartRecordHeadingKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartRecordHeadingKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartRobotAudioKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartRobotAudioKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartTurnToRecordedHeadingKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartTurnToRecordedHeadingKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems TurnToRecordedHeadingKeyFrame(Int32) Declaration public TurnToRecordedHeading? TurnToRecordedHeadingKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < TurnToRecordedHeading > Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.CozmoAnim.LiftHeight.html": {
    "href": "api/Anki.CozmoAnim.LiftHeight.html",
    "title": "Struct LiftHeight | Resources SDK",
    "keywords": "Struct LiftHeight The LiftHeight structure is used to specify how to move Vector’s lift. The lift should reach the target height in the duration given, ramping up the movement speed smoothly (with some variability) until it reaches that. Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.CozmoAnim Assembly : Anki.Resources.SDK.dll Syntax public struct LiftHeight : IFlatbufferObject Properties ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer DurationTimeMs How long the lift motion should last. Declaration public uint DurationTimeMs { get; } Property Value Type Description UInt32 HeightMm The height to lift the arms to. Declaration public byte HeightMm { get; } Property Value Type Description Byte HeightVariabilityMm The amount of randomness allowed for the target height. default: 0 Declaration public byte HeightVariabilityMm { get; } Property Value Type Description Byte TriggerTimeMs The time at which the lift should begin motion. Declaration public uint TriggerTimeMs { get; } Property Value Type Description UInt32 Methods __assign(Int32, ByteBuffer) Declaration public LiftHeight __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description LiftHeight __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddDurationTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddDurationTimeMs(FlatBufferBuilder builder, uint durationTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 durationTimeMs AddHeightMm(FlatBufferBuilder, Byte) Declaration public static void AddHeightMm(FlatBufferBuilder builder, byte heightMm) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Byte heightMm AddHeightVariabilityMm(FlatBufferBuilder, Byte) Declaration public static void AddHeightVariabilityMm(FlatBufferBuilder builder, byte heightVariabilityMm) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Byte heightVariabilityMm AddTriggerTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTimeMs CreateLiftHeight(FlatBufferBuilder, UInt32, UInt32, Byte, Byte) Declaration public static Offset<LiftHeight> CreateLiftHeight(FlatBufferBuilder builder, uint triggerTime_ms = 0U, uint durationTime_ms = 0U, byte height_mm = 0, byte heightVariability_mm = 0) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTime_ms UInt32 durationTime_ms Byte height_mm Byte heightVariability_mm Returns Type Description FlatBuffers.Offset < LiftHeight > EndLiftHeight(FlatBufferBuilder) Declaration public static Offset<LiftHeight> EndLiftHeight(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < LiftHeight > GetRootAsLiftHeight(ByteBuffer) Declaration public static LiftHeight GetRootAsLiftHeight(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description LiftHeight GetRootAsLiftHeight(ByteBuffer, LiftHeight) Declaration public static LiftHeight GetRootAsLiftHeight(ByteBuffer _bb, LiftHeight obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb LiftHeight obj Returns Type Description LiftHeight StartLiftHeight(FlatBufferBuilder) Declaration public static void StartLiftHeight(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.CozmoAnim.ProceduralFace.html": {
    "href": "api/Anki.CozmoAnim.ProceduralFace.html",
    "title": "Struct ProceduralFace | Resources SDK",
    "keywords": "Struct ProceduralFace Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.CozmoAnim Assembly : Anki.Resources.SDK.dll Syntax public struct ProceduralFace : IFlatbufferObject Properties ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer FaceAngle Declaration public float FaceAngle { get; } Property Value Type Description Single FaceCenterX Declaration public float FaceCenterX { get; } Property Value Type Description Single FaceCenterY Declaration public float FaceCenterY { get; } Property Value Type Description Single FaceScaleX Declaration public float FaceScaleX { get; } Property Value Type Description Single FaceScaleY Declaration public float FaceScaleY { get; } Property Value Type Description Single LeftEyeLength Declaration public int LeftEyeLength { get; } Property Value Type Description Int32 RightEyeLength Declaration public int RightEyeLength { get; } Property Value Type Description Int32 TriggerTimeMs Declaration public uint TriggerTimeMs { get; } Property Value Type Description UInt32 Methods __assign(Int32, ByteBuffer) Declaration public ProceduralFace __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description ProceduralFace __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddFaceAngle(FlatBufferBuilder, Single) Declaration public static void AddFaceAngle(FlatBufferBuilder builder, float faceAngle) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single faceAngle AddFaceCenterX(FlatBufferBuilder, Single) Declaration public static void AddFaceCenterX(FlatBufferBuilder builder, float faceCenterX) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single faceCenterX AddFaceCenterY(FlatBufferBuilder, Single) Declaration public static void AddFaceCenterY(FlatBufferBuilder builder, float faceCenterY) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single faceCenterY AddFaceScaleX(FlatBufferBuilder, Single) Declaration public static void AddFaceScaleX(FlatBufferBuilder builder, float faceScaleX) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single faceScaleX AddFaceScaleY(FlatBufferBuilder, Single) Declaration public static void AddFaceScaleY(FlatBufferBuilder builder, float faceScaleY) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single faceScaleY AddLeftEye(FlatBufferBuilder, VectorOffset) Declaration public static void AddLeftEye(FlatBufferBuilder builder, VectorOffset leftEyeOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset leftEyeOffset AddRightEye(FlatBufferBuilder, VectorOffset) Declaration public static void AddRightEye(FlatBufferBuilder builder, VectorOffset rightEyeOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset rightEyeOffset AddTriggerTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTimeMs CreateLeftEyeVector(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateLeftEyeVector(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateLeftEyeVectorBlock(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateLeftEyeVectorBlock(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateProceduralFace(FlatBufferBuilder, UInt32, Single, Single, Single, Single, Single, VectorOffset, VectorOffset) Declaration public static Offset<ProceduralFace> CreateProceduralFace(FlatBufferBuilder builder, uint triggerTime_ms = 0U, float faceAngle = 0F, float faceCenterX = 0F, float faceCenterY = 0F, float faceScaleX = 1F, float faceScaleY = 1F, VectorOffset leftEyeOffset = default(VectorOffset), VectorOffset rightEyeOffset = default(VectorOffset)) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTime_ms Single faceAngle Single faceCenterX Single faceCenterY Single faceScaleX Single faceScaleY FlatBuffers.VectorOffset leftEyeOffset FlatBuffers.VectorOffset rightEyeOffset Returns Type Description FlatBuffers.Offset < ProceduralFace > CreateRightEyeVector(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateRightEyeVector(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateRightEyeVectorBlock(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateRightEyeVectorBlock(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset EndProceduralFace(FlatBufferBuilder) Declaration public static Offset<ProceduralFace> EndProceduralFace(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < ProceduralFace > GetLeftEyeArray() Declaration public float[] GetLeftEyeArray() Returns Type Description Single [] GetLeftEyeBytes() Declaration public ArraySegment<byte>? GetLeftEyeBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetRightEyeArray() Declaration public float[] GetRightEyeArray() Returns Type Description Single [] GetRightEyeBytes() Declaration public ArraySegment<byte>? GetRightEyeBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetRootAsProceduralFace(ByteBuffer) Declaration public static ProceduralFace GetRootAsProceduralFace(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description ProceduralFace GetRootAsProceduralFace(ByteBuffer, ProceduralFace) Declaration public static ProceduralFace GetRootAsProceduralFace(ByteBuffer _bb, ProceduralFace obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb ProceduralFace obj Returns Type Description ProceduralFace LeftEye(Int32) Declaration public float LeftEye(int j) Parameters Type Name Description Int32 j Returns Type Description Single RightEye(Int32) Declaration public float RightEye(int j) Parameters Type Name Description Int32 j Returns Type Description Single StartLeftEyeVector(FlatBufferBuilder, Int32) Declaration public static void StartLeftEyeVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartProceduralFace(FlatBufferBuilder) Declaration public static void StartProceduralFace(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder StartRightEyeVector(FlatBufferBuilder, Int32) Declaration public static void StartRightEyeVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.CozmoAnim.RecordHeading.html": {
    "href": "api/Anki.CozmoAnim.RecordHeading.html",
    "title": "Struct RecordHeading | Resources SDK",
    "keywords": "Struct RecordHeading The RecordHeading structure is used to recording the robots heading, at the start of an animation. [or possibly after a randomized body motion?] Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.CozmoAnim Assembly : Anki.Resources.SDK.dll Syntax public struct RecordHeading : IFlatbufferObject Properties ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer TriggerTimeMs The time when the robot should record his heading Declaration public uint TriggerTimeMs { get; } Property Value Type Description UInt32 Methods __assign(Int32, ByteBuffer) Declaration public RecordHeading __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description RecordHeading __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddTriggerTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTimeMs CreateRecordHeading(FlatBufferBuilder, UInt32) Declaration public static Offset<RecordHeading> CreateRecordHeading(FlatBufferBuilder builder, uint triggerTime_ms = 0U) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTime_ms Returns Type Description FlatBuffers.Offset < RecordHeading > EndRecordHeading(FlatBufferBuilder) Declaration public static Offset<RecordHeading> EndRecordHeading(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < RecordHeading > GetRootAsRecordHeading(ByteBuffer) Declaration public static RecordHeading GetRootAsRecordHeading(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description RecordHeading GetRootAsRecordHeading(ByteBuffer, RecordHeading) Declaration public static RecordHeading GetRootAsRecordHeading(ByteBuffer _bb, RecordHeading obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb RecordHeading obj Returns Type Description RecordHeading StartRecordHeading(FlatBufferBuilder) Declaration public static void StartRecordHeading(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.CozmoAnim.RobotAudio.html": {
    "href": "api/Anki.CozmoAnim.RobotAudio.html",
    "title": "Struct RobotAudio | Resources SDK",
    "keywords": "Struct RobotAudio Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.CozmoAnim Assembly : Anki.Resources.SDK.dll Syntax public struct RobotAudio : IFlatbufferObject Properties AudioEventIdLength Declaration public int AudioEventIdLength { get; } Property Value Type Description Int32 ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer HasAlts Declaration public bool HasAlts { get; } Property Value Type Description Boolean ProbabilityLength Declaration public int ProbabilityLength { get; } Property Value Type Description Int32 TriggerTimeMs Declaration public uint TriggerTimeMs { get; } Property Value Type Description UInt32 Volume Declaration public float Volume { get; } Property Value Type Description Single Methods __assign(Int32, ByteBuffer) Declaration public RobotAudio __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description RobotAudio __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddAudioEventId(FlatBufferBuilder, VectorOffset) Declaration public static void AddAudioEventId(FlatBufferBuilder builder, VectorOffset audioEventIdOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset audioEventIdOffset AddHasAlts(FlatBufferBuilder, Boolean) Declaration public static void AddHasAlts(FlatBufferBuilder builder, bool hasAlts) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Boolean hasAlts AddProbability(FlatBufferBuilder, VectorOffset) Declaration public static void AddProbability(FlatBufferBuilder builder, VectorOffset probabilityOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset probabilityOffset AddTriggerTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTimeMs AddVolume(FlatBufferBuilder, Single) Declaration public static void AddVolume(FlatBufferBuilder builder, float volume) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single volume AudioEventId(Int32) Declaration public long AudioEventId(int j) Parameters Type Name Description Int32 j Returns Type Description Int64 CreateAudioEventIdVector(FlatBufferBuilder, Int64[]) Declaration public static VectorOffset CreateAudioEventIdVector(FlatBufferBuilder builder, long[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int64 [] data Returns Type Description FlatBuffers.VectorOffset CreateAudioEventIdVectorBlock(FlatBufferBuilder, Int64[]) Declaration public static VectorOffset CreateAudioEventIdVectorBlock(FlatBufferBuilder builder, long[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int64 [] data Returns Type Description FlatBuffers.VectorOffset CreateProbabilityVector(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateProbabilityVector(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateProbabilityVectorBlock(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateProbabilityVectorBlock(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateRobotAudio(FlatBufferBuilder, UInt32, VectorOffset, Single, VectorOffset, Boolean) Declaration public static Offset<RobotAudio> CreateRobotAudio(FlatBufferBuilder builder, uint triggerTime_ms = 0U, VectorOffset audioEventIdOffset = default(VectorOffset), float volume = 1F, VectorOffset probabilityOffset = default(VectorOffset), bool hasAlts = true) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTime_ms FlatBuffers.VectorOffset audioEventIdOffset Single volume FlatBuffers.VectorOffset probabilityOffset Boolean hasAlts Returns Type Description FlatBuffers.Offset < RobotAudio > EndRobotAudio(FlatBufferBuilder) Declaration public static Offset<RobotAudio> EndRobotAudio(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < RobotAudio > GetAudioEventIdArray() Declaration public long[] GetAudioEventIdArray() Returns Type Description Int64 [] GetAudioEventIdBytes() Declaration public ArraySegment<byte>? GetAudioEventIdBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetProbabilityArray() Declaration public float[] GetProbabilityArray() Returns Type Description Single [] GetProbabilityBytes() Declaration public ArraySegment<byte>? GetProbabilityBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetRootAsRobotAudio(ByteBuffer) Declaration public static RobotAudio GetRootAsRobotAudio(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description RobotAudio GetRootAsRobotAudio(ByteBuffer, RobotAudio) Declaration public static RobotAudio GetRootAsRobotAudio(ByteBuffer _bb, RobotAudio obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb RobotAudio obj Returns Type Description RobotAudio Probability(Int32) Declaration public float Probability(int j) Parameters Type Name Description Int32 j Returns Type Description Single StartAudioEventIdVector(FlatBufferBuilder, Int32) Declaration public static void StartAudioEventIdVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartProbabilityVector(FlatBufferBuilder, Int32) Declaration public static void StartProbabilityVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartRobotAudio(FlatBufferBuilder) Declaration public static void StartRobotAudio(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.CozmoAnim.TurnToRecordedHeading.html": {
    "href": "api/Anki.CozmoAnim.TurnToRecordedHeading.html",
    "title": "Struct TurnToRecordedHeading | Resources SDK",
    "keywords": "Struct TurnToRecordedHeading The TurnToRecordedHeading is used to specify how Vector should turn to the previously recorded heading. The robot reach the target heading in the duration given, ramping up the movement speed smoothly until it reaches that position (within some tolerance). Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.CozmoAnim Assembly : Anki.Resources.SDK.dll Syntax public struct TurnToRecordedHeading : IFlatbufferObject Properties AccelDegPerSec2 How fast Vector should accelerate when turning. default: 1000 Declaration public short AccelDegPerSec2 { get; } Property Value Type Description Int16 ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer DecelDegPerSec2 How fast Vector should decelerate when turning. default: 1000 Declaration public short DecelDegPerSec2 { get; } Property Value Type Description Int16 DurationTimeMs The amount of time to move to the recorded heading. Declaration public uint DurationTimeMs { get; } Property Value Type Description UInt32 NumHalfRevs Declaration public ushort NumHalfRevs { get; } Property Value Type Description UInt16 OffsetDeg Declaration public short OffsetDeg { get; } Property Value Type Description Int16 SpeedDegPerSec The speed that Vector should turn at. Declaration public short SpeedDegPerSec { get; } Property Value Type Description Int16 ToleranceDeg This specifies how close the actual heading is to the target before considering the movement complete. Default: 2 Declaration public ushort ToleranceDeg { get; } Property Value Type Description UInt16 TriggerTimeMs The time when Vector should begin to turn to the recorded heading. Declaration public uint TriggerTimeMs { get; } Property Value Type Description UInt32 UseShortestDir Declaration public bool UseShortestDir { get; } Property Value Type Description Boolean Methods __assign(Int32, ByteBuffer) Declaration public TurnToRecordedHeading __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description TurnToRecordedHeading __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddAccelDegPerSec2(FlatBufferBuilder, Int16) Declaration public static void AddAccelDegPerSec2(FlatBufferBuilder builder, short accelDegPerSec2) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int16 accelDegPerSec2 AddDecelDegPerSec2(FlatBufferBuilder, Int16) Declaration public static void AddDecelDegPerSec2(FlatBufferBuilder builder, short decelDegPerSec2) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int16 decelDegPerSec2 AddDurationTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddDurationTimeMs(FlatBufferBuilder builder, uint durationTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 durationTimeMs AddNumHalfRevs(FlatBufferBuilder, UInt16) Declaration public static void AddNumHalfRevs(FlatBufferBuilder builder, ushort numHalfRevs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt16 numHalfRevs AddOffsetDeg(FlatBufferBuilder, Int16) Declaration public static void AddOffsetDeg(FlatBufferBuilder builder, short offsetDeg) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int16 offsetDeg AddSpeedDegPerSec(FlatBufferBuilder, Int16) Declaration public static void AddSpeedDegPerSec(FlatBufferBuilder builder, short speedDegPerSec) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int16 speedDegPerSec AddToleranceDeg(FlatBufferBuilder, UInt16) Declaration public static void AddToleranceDeg(FlatBufferBuilder builder, ushort toleranceDeg) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt16 toleranceDeg AddTriggerTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTimeMs AddUseShortestDir(FlatBufferBuilder, Boolean) Declaration public static void AddUseShortestDir(FlatBufferBuilder builder, bool useShortestDir) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Boolean useShortestDir CreateTurnToRecordedHeading(FlatBufferBuilder, UInt32, UInt32, Int16, Int16, Int16, Int16, UInt16, UInt16, Boolean) Declaration public static Offset<TurnToRecordedHeading> CreateTurnToRecordedHeading(FlatBufferBuilder builder, uint triggerTime_ms = 0U, uint durationTime_ms = 0U, short offset_deg = 0, short speed_degPerSec = 0, short accel_degPerSec2 = 1000, short decel_degPerSec2 = 1000, ushort tolerance_deg = 2, ushort numHalfRevs = 0, bool useShortestDir = false) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTime_ms UInt32 durationTime_ms Int16 offset_deg Int16 speed_degPerSec Int16 accel_degPerSec2 Int16 decel_degPerSec2 UInt16 tolerance_deg UInt16 numHalfRevs Boolean useShortestDir Returns Type Description FlatBuffers.Offset < TurnToRecordedHeading > EndTurnToRecordedHeading(FlatBufferBuilder) Declaration public static Offset<TurnToRecordedHeading> EndTurnToRecordedHeading(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < TurnToRecordedHeading > GetRootAsTurnToRecordedHeading(ByteBuffer) Declaration public static TurnToRecordedHeading GetRootAsTurnToRecordedHeading(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description TurnToRecordedHeading GetRootAsTurnToRecordedHeading(ByteBuffer, TurnToRecordedHeading) Declaration public static TurnToRecordedHeading GetRootAsTurnToRecordedHeading(ByteBuffer _bb, TurnToRecordedHeading obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb TurnToRecordedHeading obj Returns Type Description TurnToRecordedHeading StartTurnToRecordedHeading(FlatBufferBuilder) Declaration public static void StartTurnToRecordedHeading(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.Resources.SDK.AnimationGroupItem.html": {
    "href": "api/Anki.Resources.SDK.AnimationGroupItem.html",
    "title": "Class AnimationGroupItem | Resources SDK",
    "keywords": "Class AnimationGroupItem The AnimationGroupItem structure describes the specific animation clip to use. It may also specify some head movement, with some variability; this is optional. If enabled, the head is to move to some angle (between the given min and max) while the animation plays. Inheritance Object AnimationGroupItem Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class AnimationGroupItem Properties CooldownTime_Sec The minimum duration, after this animation has completed, before it can be used again. Typically 0.0 Declaration public float CooldownTime_Sec { get; set; } Property Value Type Description Single HeadAngleMax_Deg The head is to move to random angle les than (or equal) to this. Only used if UseHeadAngle is true. Declaration public float HeadAngleMax_Deg { get; set; } Property Value Type Description Single HeadAngleMin_Deg The head is to move to random angle greater (or equal) to this. Only used if UseHeadAngle is true. Declaration public float HeadAngleMin_Deg { get; set; } Property Value Type Description Single Mood The name of a simple moode or “Default” Declaration public string Mood { get; set; } Property Value Type Description String Name The name of the animation clip to play. This clip is defined within one of the animation binary or JSON files. Declaration public string Name { get; set; } Property Value Type Description String UseHeadAngle Optional, default is false Declaration public bool UseHeadAngle { get; set; } Property Value Type Description Boolean Weight Typically 1.0 Declaration public float Weight { get; set; } Property Value Type Description Single"
  },
  "api/Anki.Resources.SDK.Assets.html": {
    "href": "api/Anki.Resources.SDK.Assets.html",
    "title": "Class Assets | Resources SDK",
    "keywords": "Class Assets This is a class to access the resources in the Cozmo_Resources folder for Vector (And maybe some of Cozmo) Inheritance System.Object Assets Implements IDisposable Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class Assets : IDisposable Examples var assets = new Assets(... some path to Vector resources ..); var audioAssets = assets.AudioAssets; Constructors Assets(String) This is the constructor for a wrapper around the Vector Resources folder Declaration public Assets(string basePath) Parameters Type Name Description String basePath The path to the root of the Vector file system Fields App2UserIntent Maps the application intent to the user intent. Declaration public IReadOnlyDictionary<string, UserIntentMap> App2UserIntent Field Value Type Description IReadOnlyDictionary < String , UserIntentMap > AssetsType The type of assets folder Declaration public readonly AssetsType AssetsType Field Value Type Description AssetsType Cloud2Response Maps the cloud intent to the response Declaration public IReadOnlyDictionary<string, SimpleVoiceResponse> Cloud2Response Field Value Type Description IReadOnlyDictionary < String , SimpleVoiceResponse > Cloud2UserIntent Maps the cloud intent to the user intent Declaration public IReadOnlyDictionary<string, UserIntentMap> Cloud2UserIntent Field Value Type Description IReadOnlyDictionary < String , UserIntentMap > ConditionSchema The condition node schema Declaration public static readonly ConditionSchema ConditionSchema Field Value Type Description ConditionSchema DisplaySize The size of the LCD Declaration public readonly Size DisplaySize Field Value Type Description System.Drawing.Size VisionScheduleConfig The vision scheduler configuration specifies the frequency to run a given image processing step, for each of the vision processing subsystems modes. Declaration public readonly IReadOnlyDictionary<string, VisionModeSetting> VisionScheduleConfig Field Value Type Description IReadOnlyDictionary < String , VisionModeSetting > Properties AnimationNames Provides a list of the animation names Declaration public IReadOnlyCollection<string> AnimationNames { get; } Property Value Type Description IReadOnlyCollection < String > AnimationTriggerName2GroupName Maps the animation trigger name to animation group filename (without the extension) The animation name. Effectively this is the JSON file (without the “.json” suffix) for the animation. Declaration public IReadOnlyDictionary<string, string> AnimationTriggerName2GroupName { get; } Property Value Type Description IReadOnlyDictionary < String , String > AnimationTriggerNames Provides a list of the animation trigger names. Declaration public IReadOnlyCollection<string> AnimationTriggerNames { get; } Property Value Type Description IReadOnlyCollection < String > AnimMultiplyDefined Tracks which animation clips are defined in multiple files. Declaration public IReadOnlyDictionary<string, string> AnimMultiplyDefined { get; } Property Value Type Description IReadOnlyDictionary < String , String > AudioAssets This provides the audio assets wrapper Declaration public AudioAssets AudioAssets { get; } Property Value Type Description AudioAssets BackpackLightsTriggerNames Provides a list of the backpack light animation trigger names. Declaration public IReadOnlyCollection<string> BackpackLightsTriggerNames { get; } Property Value Type Description IReadOnlyCollection < String > BlackJack The blackjack game Declaration public BlackJack BlackJack { get; } Property Value Type Description BlackJack Classifiers A table of the classifiers (and detectors) included or configured in the resources. Declaration public IReadOnlyDictionary<string, ClassifierInfo> Classifiers { get; } Property Value Type Description IReadOnlyDictionary < String , ClassifierInfo > CubeLightsTriggerNames Provides a list of the cube light animation trigger names. Declaration public IReadOnlyCollection<string> CubeLightsTriggerNames { get; } Property Value Type Description IReadOnlyCollection < String > EmotionEvents Maps an emotion event name to how the emotion event is handled. Declaration public IReadOnlyDictionary<string, EmotionEvent> EmotionEvents { get; } Property Value Type Description IReadOnlyDictionary < String , EmotionEvent > EmotionRanges The allowed value range for each dimension of the emotion Declaration public IReadOnlyDictionary<string, MinMax> EmotionRanges { get; } Property Value Type Description IReadOnlyDictionary < String , MinMax > EmotionValueRanges The table mapping each dimension of emotion to its allow range of values Declaration public IReadOnlyDictionary<string, MinMax> EmotionValueRanges { get; } Property Value Type Description IReadOnlyDictionary < String , MinMax > Features Provides a table of the feature flags and whether it is enabled or disabled Declaration public IReadOnlyDictionary<string, bool> Features { get; } Property Value Type Description IReadOnlyDictionary < String , Boolean > ImageLayoutTriggerName2Filename Maps the trigger name to the display layout filename. Declaration public IReadOnlyDictionary<string, string> ImageLayoutTriggerName2Filename { get; } Property Value Type Description IReadOnlyDictionary < String , String > ImageLayoutTriggerNames Provides a list of the image layout trigger names. Declaration public IReadOnlyCollection<string> ImageLayoutTriggerNames { get; } Property Value Type Description IReadOnlyCollection < String > ImageMapTriggerName2Filename Maps the trigger name to the image map filename. Declaration public IReadOnlyDictionary<string, string> ImageMapTriggerName2Filename { get; } Property Value Type Description IReadOnlyDictionary < String , String > IndependentSpriteNames Provides a list of the independent sprite names Declaration public IReadOnlyCollection<string> IndependentSpriteNames { get; } Property Value Type Description IReadOnlyCollection < String > Servers Provides a table of the servers and their addresses Declaration public IReadOnlyDictionary<string, string> Servers { get; } Property Value Type Description IReadOnlyDictionary < String , String > SimpleMoods The built in table of simple moods. Declaration public IReadOnlyDictionary<string, string> SimpleMoods { get; } Property Value Type Description IReadOnlyDictionary < String , String > SpriteSequenceNames Provides a list of the sprite sequence names, preserving the case used in the file system. Declaration public IEnumerable<string> SpriteSequenceNames { get; } Property Value Type Description IEnumerable < String > unmatched_intent The intent to employ if cloud’s intent cannot be found in the table above. Default: “unmatched_intent” Declaration public string unmatched_intent { get; set; } Property Value Type Description String Weather The Weather Declaration public Weather Weather { get; } Property Value Type Description Weather Methods AnalyzeAnimationTriggerName(StringBuilder, String) Analyzes the animation(s) and support files implied by the given animation trigger name. Declaration public void AnalyzeAnimationTriggerName(StringBuilder errs, string triggerName) Parameters Type Name Description StringBuilder errs The errors found within the animation tree String triggerName The animation trigger name AnimationDuration(String) The duration of the animation (when played) Declaration public int AnimationDuration(string animationName) Parameters Type Name Description String animationName The animation name (the name of the clip not the trigger name) Returns Type Description Int32 0 on error, otherwise the duration (ms) AnimationForName(String) Looks up the animation for the name Declaration public object AnimationForName(string animationName) Parameters Type Name Description String animationName The animation name (the name of the clip not the trigger name) Returns Type Description System.Object null on error, otherwise an animation object of type Anki.VectAnim.Keyframes, Anki.CozmoAnim.Keyframes or TBD JSON animation AnimationGroupForTrigger(String) Looks up the animation group given the trigger name Declaration public IReadOnlyCollection<AnimationGroupItem> AnimationGroupForTrigger(string triggerName) Parameters Type Name Description String triggerName The animation trigger name Returns Type Description IReadOnlyCollection < AnimationGroupItem > A set of possible animations to display BackpackLightsForTrigger(String) Looks up the pattern to play the backpack lights in given the trigger name Declaration public IReadOnlyList<LightsPattern> BackpackLightsForTrigger(string triggerName) Parameters Type Name Description String triggerName The animation trigger name Returns Type Description IReadOnlyList < LightsPattern > A sequence of light patterns to display CompositeImageForTrigger(String) Looks up the composite image for the given trigger name Declaration public CompositeImage CompositeImageForTrigger(string triggerName) Parameters Type Name Description String triggerName The image layout trigger name Returns Type Description CompositeImage The composite image ConditionToString(IReadOnlyDictionary<String, Object>) Convert the condition JSON structure to a pretty-printed string Declaration public static string ConditionToString(IReadOnlyDictionary<string, object> cond) Parameters Type Name Description IReadOnlyDictionary < String , System.Object > cond The condition JSON structure Returns Type Description String The pretty-printed string CubeLightsForTrigger(String) Looks up the pattern to play the cube lights in given the trigger name Declaration public IReadOnlyList<LightsPattern> CubeLightsForTrigger(string triggerName) Parameters Type Name Description String triggerName The animation trigger name Returns Type Description IReadOnlyList < LightsPattern > A sequence of light patterns to display Dispose() Public implementation of Dispose pattern callable by consumers. Declaration public void Dispose() Dispose(Boolean) Protected implementation of Dispose pattern. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing IndependentSprite(String) This is used to the sprite Declaration public Bitmap IndependentSprite(string spriteName) Parameters Type Name Description String spriteName The name of the sprite Returns Type Description System.Drawing.Bitmap The sprite IndependentSpritePath(String) This is use to provide the path to the sprite, relative to the resource base Declaration public string IndependentSpritePath(string spriteName) Parameters Type Name Description String spriteName Returns Type Description String null on error, otherwise the sprite path relative to the resources base LocalizedTextSubstitution(String, String) Opens up the localization tables and text substitution Declaration public TextSubstitution LocalizedTextSubstitution(string resourceName, string locale = \"en-US\") Parameters Type Name Description String resourceName The name of the resouce file, with JSON suffix: e.g. BehaviorStrings.json, BlackJackStrings.json, FaceEnrollmentStrings.json String locale de-DE, en-US, fr-FR, optional default is en-US Returns Type Description TextSubstitution null on error, otherwise an object that can localize the strings SpriteSequence(String) This is used to provide a sprite sequence for the sequence name. Declaration public SpriteSequence SpriteSequence(string sequenceName) Parameters Type Name Description String sequenceName The name of the sprite sequence Returns Type Description SpriteSequence An enumeration of the sprite paths relative to the resources base Implements System.IDisposable"
  },
  "api/Anki.Resources.SDK.AssetsType.html": {
    "href": "api/Anki.Resources.SDK.AssetsType.html",
    "title": "Enum AssetsType | Resources SDK",
    "keywords": "Enum AssetsType The type of assets folder Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public enum AssetsType Fields Name Description Cozmo Cozmo-style assets Vector Vector-style assets"
  },
  "api/Anki.Resources.SDK.BehaviorCoordinator.html": {
    "href": "api/Anki.Resources.SDK.BehaviorCoordinator.html",
    "title": "Class BehaviorCoordinator | Resources SDK",
    "keywords": "Class BehaviorCoordinator A helper for behaviors like games and weather Inheritance Object BehaviorCoordinator BlackJack Clock Weather Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class BehaviorCoordinator Fields CompositeImagesUsed A list of the composite images internally referenced Declaration public readonly IReadOnlyList<string> CompositeImagesUsed Field Value Type Description IReadOnlyList < String > IndependentSpritesUsed A list of the independent sprites that are internally referenced Declaration public readonly IReadOnlyList<string> IndependentSpritesUsed Field Value Type Description IReadOnlyList < String >"
  },
  "api/Anki.Resources.SDK.BlackJack.html": {
    "href": "api/Anki.Resources.SDK.BlackJack.html",
    "title": "Class BlackJack | Resources SDK",
    "keywords": "Class BlackJack The behavior to support the Black Jack game Inheritance Object BehaviorCoordinator BlackJack Inherited Members BehaviorCoordinator.IndependentSpritesUsed BehaviorCoordinator.CompositeImagesUsed Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class BlackJack : BehaviorCoordinator"
  },
  "api/Anki.Resources.SDK.Classification.html": {
    "href": "api/Anki.Resources.SDK.Classification.html",
    "title": "Struct Classification | Resources SDK",
    "keywords": "Struct Classification The classification in each grid cell. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public struct Classification Properties Label The label associated with the classification. Declaration public string Label { get; } Property Value Type Description String Probability The probability associated with the classification. Declaration public float Probability { get; } Property Value Type Description Single"
  },
  "api/Anki.Resources.SDK.Classifier_TFLite.html": {
    "href": "api/Anki.Resources.SDK.Classifier_TFLite.html",
    "title": "Class Classifier_TFLite | Resources SDK",
    "keywords": "Class Classifier_TFLite This class is used to perform classification/detection based on images passed to a TFLite model. Inheritance Object Classifier_TFLite Implements IProcessImage IDisposable Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class Classifier_TFLite : IProcessImage, IDisposable Constructors Classifier_TFLite(String, String, String, IReadOnlyList<String>, Int32, Int32) Initializes the node to process the Declaration public Classifier_TFLite(string path, string inputName, string outputName, IReadOnlyList<string> labels, int numColumns = 1, int numRows = 1) Parameters Type Name Description String path The path to the model file String inputName The name of the input to use String outputName The name of the output to use IReadOnlyList < String > labels The labels used for each of the classification steps. Int32 numColumns The number of columns in the grid of classifications. Int32 numRows The number of rows in the grid of classifications. Properties InputTensor The input to the model. Declaration public Tensor InputTensor { get; } Property Value Type Description Emgu.TF.Lite.Tensor OutputTensor The output from the model. Declaration public Tensor OutputTensor { get; } Property Value Type Description Emgu.TF.Lite.Tensor Methods Dispose() Release the IDiposable resources Declaration public void Dispose() Dispose(Boolean) Release the IDiposable resources Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing True if called from Dispose() IsCategorization() This returns true if the results are a list of categories, false if it is a localization Declaration public bool IsCategorization() Returns Type Description Boolean true if a categorization, false if a localization ProcessImage(ImageContainer) Processes the input image to determine the classification Declaration public Classification[, ] ProcessImage(ImageContainer imageContainer) Parameters Type Name Description ImageContainer imageContainer The image to process Returns Type Description Classification [,] If two dimensional, it is a grid of the image and the classification of each cell within it. If one dimensional, it is list of classifications for the whole image. Implements IProcessImage System.IDisposable"
  },
  "api/Anki.Resources.SDK.ClassifierInfo.html": {
    "href": "api/Anki.Resources.SDK.ClassifierInfo.html",
    "title": "Class ClassifierInfo | Resources SDK",
    "keywords": "Class ClassifierInfo This is a class intended to support a variety of classifiers and detectors, such as those built on Open CV, TFlite, and off-boarded (bumped to an external server.) Inheritance Object ClassifierInfo Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class ClassifierInfo Fields FullPath The full path to the classifier file Declaration public readonly string FullPath Field Value Type Description String Type The type of classifier model -- e.g. OpenCV, TFLite, or Offboard Declaration public readonly string Type Field Value Type Description String Properties Definition Declaration public IReadOnlyDictionary<string, object> Definition { get; } Property Value Type Description IReadOnlyDictionary < String , Object > Labels The labels for the potential outputs. This is shared with the classifier as well. Declaration public IReadOnlyList<string> Labels { get; } Property Value Type Description IReadOnlyList < String > Name The name of the classifier Declaration public string Name { get; } Property Value Type Description String Parameters The parameters for interpreting the model. As there is a variety of models the kinds of parameters can vary a lot Declaration public IReadOnlyDictionary<string, object> Parameters { get; } Property Value Type Description IReadOnlyDictionary < String , Object > Methods CreateClassifier() Creates a classifier to process images Declaration public IProcessImage CreateClassifier() Returns Type Description IProcessImage null on error, otherwise the classifier Remarks The object may be disposable as well"
  },
  "api/Anki.Resources.SDK.Clock.html": {
    "href": "api/Anki.Resources.SDK.Clock.html",
    "title": "Class Clock | Resources SDK",
    "keywords": "Class Clock The behavior to support the Clock / Timer behaviors Inheritance Object BehaviorCoordinator Clock Inherited Members BehaviorCoordinator.IndependentSpritesUsed BehaviorCoordinator.CompositeImagesUsed Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class Clock : BehaviorCoordinator"
  },
  "api/Anki.Resources.SDK.CompositeImage.html": {
    "href": "api/Anki.Resources.SDK.CompositeImage.html",
    "title": "Class CompositeImage | Resources SDK",
    "keywords": "Class CompositeImage A composite image defines layers on the display with rectangular areas where images and sprite sequences will be drawn. Inheritance Object CompositeImage Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class CompositeImage Fields Layouts The layout defines layers with rectangular areas where images and sprite sequences will be drawn. Declaration public readonly ImageLayout[] Layouts Field Value Type Description ImageLayout [] Maps An image map describes which images and sprite sequences to display. Declaration public readonly ImageMap[] Maps Field Value Type Description ImageMap [] Properties LayerNames Enumerates the layers in the composite image Declaration public IEnumerable<string> LayerNames { get; } Property Value Type Description IEnumerable < String > Methods ImageMap(String) Returns a mapping from sprite box name to the sprite name to use, for the given layer Declaration public Dictionary<string, string> ImageMap(string layerName) Parameters Type Name Description String layerName The name of the layer to fetch Returns Type Description Dictionary < String , String > null if the layer does not exist (or is undefined), otherwise a dictionary mapping the sprite box name to the sprite name to employ. Layout(String) Returns the layout for the given layer name Declaration public IReadOnlyCollection<SpriteBox> Layout(string layerName) Parameters Type Name Description String layerName The name of the layer to fetch Returns Type Description IReadOnlyCollection < SpriteBox > null if the layer does not exist (or is undefined), otherwise the list of sprite boxes defining the layout"
  },
  "api/Anki.Resources.SDK.ConditionSchema.html": {
    "href": "api/Anki.Resources.SDK.ConditionSchema.html",
    "title": "Class ConditionSchema | Resources SDK",
    "keywords": "Class ConditionSchema Schema information about conditions Inheritance Object ConditionSchema Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class ConditionSchema Properties conditionKeys The keys that refer to conditions. Declaration public IReadOnlyList<string> conditionKeys { get; set; } Property Value Type Description IReadOnlyList < String > type2keys This maps a type to the keys that are acceptable. Declaration public IReadOnlyDictionary<string, IReadOnlyList<string>> type2keys { get; set; } Property Value Type Description IReadOnlyDictionary < String , IReadOnlyList < String >>"
  },
  "api/Anki.Resources.SDK.DecayGraph.html": {
    "href": "api/Anki.Resources.SDK.DecayGraph.html",
    "title": "Class DecayGraph | Resources SDK",
    "keywords": "Class DecayGraph This describes how an emotion decays over time. Inheritance Object DecayGraph Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class DecayGraph Properties emotionType The dimension or type of emotion (\"Happy\", \"Confident\", \"Stimulated\", \"Social\", or \"Trust\"). \"default\" also matches. Declaration public string emotionType { get; set; } Property Value Type Description String graphType \"TimeRatio\" or \"ValueSlope\" Declaration public string graphType { get; set; } Property Value Type Description String nodes This is a \"time ratio\" describing how the value decays. Declaration public IReadOnlyList<XY> nodes { get; set; } Property Value Type Description IReadOnlyList < XY >"
  },
  "api/Anki.Resources.SDK.EmotionAffector.html": {
    "href": "api/Anki.Resources.SDK.EmotionAffector.html",
    "title": "Class EmotionAffector | Resources SDK",
    "keywords": "Class EmotionAffector The EmotionAffector describes how an emotion dimension should be modified. Inheritance Object EmotionAffector Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class EmotionAffector Properties emotionType The dimension or type of emotion (\"Happy\", \"Confident\", \"Stimulated\", \"Social\", or \"Trust\") Declaration public string emotionType { get; set; } Property Value Type Description String value The value to add to the emotional state. The range is -1 to 1 Declaration public float value { get; set; } Property Value Type Description Single"
  },
  "api/Anki.Resources.SDK.EmotionEvent.html": {
    "href": "api/Anki.Resources.SDK.EmotionEvent.html",
    "title": "Class EmotionEvent | Resources SDK",
    "keywords": "Class EmotionEvent The EmotionEvent describes how the emotions respond to a given event. Inheritance Object EmotionEvent Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class EmotionEvent Properties emotionAffectors The impact on the emotion state. Declaration public IReadOnlyList<EmotionAffector> emotionAffectors { get; set; } Property Value Type Description IReadOnlyList < EmotionAffector > name The name of the event. Declaration public string name { get; set; } Property Value Type Description String repetitionPenalty This is a \"time ratio\" describing how the value decays. Optional. Declaration public DecayGraph repetitionPenalty { get; set; } Property Value Type Description DecayGraph"
  },
  "api/Anki.Resources.SDK.html": {
    "href": "api/Anki.Resources.SDK.html",
    "title": "| Resources SDK",
    "keywords": "Classes AnimationGroupItem The AnimationGroupItem structure describes the specific animation clip to use. It may also specify some head movement, with some variability; this is optional. If enabled, the head is to move to some angle (between the given min and max) while the animation plays. Assets This is a class to access the resources in the Cozmo_Resources folder for Vector (And maybe some of Cozmo) BehaviorCoordinator A helper for behaviors like games and weather BlackJack The behavior to support the Black Jack game Classifier_TFLite This class is used to perform classification/detection based on images passed to a TFLite model. ClassifierInfo This is a class intended to support a variety of classifiers and detectors, such as those built on Open CV, TFlite, and off-boarded (bumped to an external server.) Clock The behavior to support the Clock / Timer behaviors CompositeImage A composite image defines layers on the display with rectangular areas where images and sprite sequences will be drawn. ConditionSchema Schema information about conditions DecayGraph This describes how an emotion decays over time. EmotionAffector The EmotionAffector describes how an emotion dimension should be modified. EmotionEvent The EmotionEvent describes how the emotions respond to a given event. ImageContainer This is used to hold the image from the camera and converted sizes ImageLayout A screen layout defines rectangular areas on the display where images and sprite sequences will be drawn. ImageMap An image map describes which images and sprite sequences to display. LightFrame This is used to desribe the illumination of a single light LightsPattern This describes the pattern for all of the lights on the item MinMax A helper class to hold the allow minimum and maximum SimpleVoiceResponse The animation and emotion changes that should occur. SpriteBox A sprite box defines a rectangular area on the display to draw an image of sprite sequence. SpriteMapBox The name of the image or sprite sequence to display in the sprite box. SpriteSequence This is a wrapper around an sprite sequence TextSubstitution Provide a localized strings with substituted matches UserIntentMap A table that maps the intent received by the cloud or application to the intent name used internally. This includes renaming the parameters. VisionModeSetting This is used to as part of the vision scheduler configuration. It specifies the frequency to run a given image processing step, for each of the vision processing subsystems modes. 1 means \"runs every frame,\" 4 every fourth frame, and so on. Weather The Weather behavior XY The XY structure is used to define how a value (often the value associated with an emotion dimension) should decay with time. Structs Classification The classification in each grid cell. Interfaces IProcessImage This interface allows us to work with many different kinds of image processing steps. Enums AssetsType The type of assets folder"
  },
  "api/Anki.Resources.SDK.ImageContainer.html": {
    "href": "api/Anki.Resources.SDK.ImageContainer.html",
    "title": "Class ImageContainer | Resources SDK",
    "keywords": "Class ImageContainer This is used to hold the image from the camera and converted sizes Inheritance Object ImageContainer Implements IDisposable Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class ImageContainer : IDisposable Constructors ImageContainer(Mat) Creates the container of the image and it's various sizes Declaration public ImageContainer(Mat image) Parameters Type Name Description Emgu.CV.Mat image The original image Methods Dispose() Releases the internal resources Declaration public void Dispose() Dispose(Boolean) Dispose of the internal stuff Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Image(Size, DepthType, Boolean) This is used to get a representation of the image at the requested size Declaration public Mat Image(Size size, DepthType depth, bool inRGBOrder) Parameters Type Name Description Size size The size of the image Emgu.CV.CvEnum.DepthType depth The type of the image pixel elements Boolean inRGBOrder If true, the image should be in RGB order; false is BGR Returns Type Description Emgu.CV.Mat The image Implements System.IDisposable"
  },
  "api/Anki.Resources.SDK.ImageLayout.html": {
    "href": "api/Anki.Resources.SDK.ImageLayout.html",
    "title": "Class ImageLayout | Resources SDK",
    "keywords": "Class ImageLayout A screen layout defines rectangular areas on the display where images and sprite sequences will be drawn. Inheritance Object ImageLayout Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class ImageLayout Properties layerName The name of the layer. (This name is also defined in vic-anim and libcozmo_engine) The animation engine may use this to select the procedure(s) in charge managing the layer and sprite boxes. Declaration public string layerName { get; set; } Property Value Type Description String spriteBoxLayout An array of sprite boxes for showing icons and other images. Declaration public IReadOnlyCollection<SpriteBox> spriteBoxLayout { get; set; } Property Value Type Description IReadOnlyCollection < SpriteBox >"
  },
  "api/Anki.Resources.SDK.ImageMap.html": {
    "href": "api/Anki.Resources.SDK.ImageMap.html",
    "title": "Class ImageMap | Resources SDK",
    "keywords": "Class ImageMap An image map describes which images and sprite sequences to display. Inheritance Object ImageMap Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class ImageMap Properties images An array of sprite boxes for showing sprite sequences. Declaration public IReadOnlyCollection<SpriteMapBox> images { get; set; } Property Value Type Description IReadOnlyCollection < SpriteMapBox > layerName The name of the layer. The animation engine may use this to select the procedure(s) in charge managing the layer and sprite boxes. Declaration public string layerName { get; set; } Property Value Type Description String"
  },
  "api/Anki.Resources.SDK.IProcessImage.html": {
    "href": "api/Anki.Resources.SDK.IProcessImage.html",
    "title": "Interface IProcessImage | Resources SDK",
    "keywords": "Interface IProcessImage This interface allows us to work with many different kinds of image processing steps. Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public interface IProcessImage Methods IsCategorization() This returns true if the results are a list of categories, false if it is a localization Declaration bool IsCategorization() Returns Type Description Boolean true if a categorization, false if a localization ProcessImage(ImageContainer) Processes the input image to determine the classification Declaration Classification[, ] ProcessImage(ImageContainer imageContainer) Parameters Type Name Description ImageContainer imageContainer The image to process Returns Type Description Classification [,] If two dimensional, it is a grid of the image and the classification of each cell within it. If one dimensional, it is list of classifications for the whole image."
  },
  "api/Anki.Resources.SDK.LightFrame.html": {
    "href": "api/Anki.Resources.SDK.LightFrame.html",
    "title": "Class LightFrame | Resources SDK",
    "keywords": "Class LightFrame This is used to desribe the illumination of a single light Inheritance Object LightFrame Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class LightFrame Fields color The color for the light. Alpha is always 1. Declaration public Color color Field Value Type Description Color duration_ms The duration before a transition to the next light setting may begin. During this time the light should be illuminated with the above color; after this the color may transition to the next colors. Declaration public uint duration_ms Field Value Type Description UInt32 triggerTime_ms The time at which the light should reach this color Declaration public uint triggerTime_ms Field Value Type Description UInt32"
  },
  "api/Anki.Resources.SDK.LightsPattern.html": {
    "href": "api/Anki.Resources.SDK.LightsPattern.html",
    "title": "Class LightsPattern | Resources SDK",
    "keywords": "Class LightsPattern This describes the pattern for all of the lights on the item Inheritance Object LightsPattern Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class LightsPattern Properties canBeOverridden Default is true. Optional. Declaration public bool canBeOverridden { get; } Property Value Type Description Boolean duration_ms if zero, do this until told to stop, otherwise perform the animation for this period and proceed to next structure or stop. Declaration public float duration_ms { get; } Property Value Type Description Single lightKeyFrames A structure describing the light patterns for each of the lgihts Declaration public IReadOnlyList<IReadOnlyList<LightFrame>> lightKeyFrames { get; } Property Value Type Description IReadOnlyList < IReadOnlyList < LightFrame >> name A text name that is associated with this structure. Optional. Declaration public string name { get; } Property Value Type Description String"
  },
  "api/Anki.Resources.SDK.MinMax.html": {
    "href": "api/Anki.Resources.SDK.MinMax.html",
    "title": "Class MinMax | Resources SDK",
    "keywords": "Class MinMax A helper class to hold the allow minimum and maximum Inheritance Object MinMax Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class MinMax Properties max The maximum allowed value for the emotion type. Declaration public float max { get; } Property Value Type Description Single min The minimum allowed value for the emotion type. Declaration public float min { get; } Property Value Type Description Single"
  },
  "api/Anki.Resources.SDK.SimpleVoiceResponse.html": {
    "href": "api/Anki.Resources.SDK.SimpleVoiceResponse.html",
    "title": "Class SimpleVoiceResponse | Resources SDK",
    "keywords": "Class SimpleVoiceResponse The animation and emotion changes that should occur. Inheritance Object SimpleVoiceResponse Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class SimpleVoiceResponse Properties active_feature The AI behavior feature that should be activated. Declaration public string active_feature { get; set; } Property Value Type Description String anim_group The trigger name of the animation to play. Declaration public string anim_group { get; set; } Property Value Type Description String disable_wakeword_turn Declaration public bool disable_wakeword_turn { get; set; } Property Value Type Description Boolean emotion_event The name of the emotion event, describing how this intent affects Vector's current mood. Declaration public string emotion_event { get; set; } Property Value Type Description String"
  },
  "api/Anki.Resources.SDK.SpriteBox.html": {
    "href": "api/Anki.Resources.SDK.SpriteBox.html",
    "title": "Class SpriteBox | Resources SDK",
    "keywords": "Class SpriteBox A sprite box defines a rectangular area on the display to draw an image of sprite sequence. Inheritance Object SpriteBox Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class SpriteBox Properties height The height of the sprite box. Unit: pixels Declaration public int height { get; set; } Property Value Type Description Int32 spriteBoxName The name of the sprite box. The animation engine may use this to select the procedure(s) in charge managing the layer and sprite boxes. If an image map is available for this animation, the sprite sequence it describes will be displayed in this rectangle. Declaration public string spriteBoxName { get; set; } Property Value Type Description String spriteRenderMethod “CustomHue” if the PNG images should be converted from gray scale to the colour using the current eye colour setting. “RGBA” if the image should be drawn as is. Declaration public string spriteRenderMethod { get; set; } Property Value Type Description String width The width of the sprite box. Unit: pixels Declaration public int width { get; set; } Property Value Type Description Int32 x The x coordinate of the upper left hand corner of the sprite box. The x coordinate can be outside of the display area; only the portion of the image within the display area will be shown. This allows an image to slide in. Unit: pixels Declaration public int x { get; set; } Property Value Type Description Int32 y The y coordinate of the upper left hand corner of the sprite box. The y coordinate can be outside of the display area; only the portion of the image within the display area (0..95) will be shown. This allows an image to slide in. Unit: pixels Declaration public int y { get; set; } Property Value Type Description Int32"
  },
  "api/Anki.Resources.SDK.SpriteMapBox.html": {
    "href": "api/Anki.Resources.SDK.SpriteMapBox.html",
    "title": "Class SpriteMapBox | Resources SDK",
    "keywords": "Class SpriteMapBox The name of the image or sprite sequence to display in the sprite box. Inheritance Object SpriteMapBox Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class SpriteMapBox Properties spriteBoxName The name of the sprite box. Declaration public string spriteBoxName { get; set; } Property Value Type Description String spriteName The name of a sprite sequence. Declaration public string spriteName { get; set; } Property Value Type Description String"
  },
  "api/Anki.Resources.SDK.SpriteSequence.html": {
    "href": "api/Anki.Resources.SDK.SpriteSequence.html",
    "title": "Class SpriteSequence | Resources SDK",
    "keywords": "Class SpriteSequence This is a wrapper around an sprite sequence Inheritance Object SpriteSequence Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class SpriteSequence Fields FileNameFormat The format of the sprite sequence filename Declaration public readonly string FileNameFormat Field Value Type Description String Remarks You should not use this Name The name of the sprite sequence. Declaration public readonly string Name Field Value Type Description String Properties Bitmaps This is used to load each of the sprites in the sequence Declaration public IEnumerable<Bitmap> Bitmaps { get; } Property Value Type Description IEnumerable < Bitmap > An enumeration of the sprites Count The number of frames in the sequence Declaration public int Count { get; } Property Value Type Description Int32"
  },
  "api/Anki.Resources.SDK.TextSubstitution.html": {
    "href": "api/Anki.Resources.SDK.TextSubstitution.html",
    "title": "Class TextSubstitution | Resources SDK",
    "keywords": "Class TextSubstitution Provide a localized strings with substituted matches Inheritance Object TextSubstitution Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class TextSubstitution Methods LocalizedString(String, IReadOnlyDictionary<String, String>) This procedure looks up the localized string with possible substitution strings. Declaration public string LocalizedString(string key, IReadOnlyDictionary<string, string> substitutions) Parameters Type Name Description String key The localization key IReadOnlyDictionary < String , String > substitutions A table of text substitutions Returns Type Description String null on error, otherwise the string with placeholder substitutions"
  },
  "api/Anki.Resources.SDK.UserIntentMap.html": {
    "href": "api/Anki.Resources.SDK.UserIntentMap.html",
    "title": "Class UserIntentMap | Resources SDK",
    "keywords": "Class UserIntentMap A table that maps the intent received by the cloud or application to the intent name used internally. This includes renaming the parameters. Inheritance Object UserIntentMap Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class UserIntentMap Properties app_intent The intent name sent by the SDK application. Optional. Declaration public string app_intent { get; set; } Property Value Type Description String app_substitutions A dictionary whose keys are the keys provided by the application's intent structure, and maps to the keys used internally. Optional. Declaration public IReadOnlyDictionary<string, string> app_substitutions { get; set; } Property Value Type Description IReadOnlyDictionary < String , String > cloud_intent The intent name returned by the cloud. Declaration public string cloud_intent { get; set; } Property Value Type Description String cloud_numerics Names of keys that used as parameter values by the behaviour..?? Optional. Declaration public IReadOnlyCollection<string> cloud_numerics { get; set; } Property Value Type Description IReadOnlyCollection < String > cloud_substitutions A dictionary whose keys are the keys provided by the cloud’s intent structure, and maps to the keys used internally. Optional. Declaration public IReadOnlyDictionary<string, string> cloud_substitutions { get; set; } Property Value Type Description IReadOnlyDictionary < String , String > feature_gate The name of the feature that must be enabled before this intent can be processed. Optional. Declaration public string feature_gate { get; set; } Property Value Type Description String test_parsing Default: true. Optional. Declaration public bool test_parsing { get; set; } Property Value Type Description Boolean user_intent The name of the intent used internally within Vector's engine. Declaration public string user_intent { get; set; } Property Value Type Description String"
  },
  "api/Anki.Resources.SDK.VisionModeSetting.html": {
    "href": "api/Anki.Resources.SDK.VisionModeSetting.html",
    "title": "Class VisionModeSetting | Resources SDK",
    "keywords": "Class VisionModeSetting This is used to as part of the vision scheduler configuration. It specifies the frequency to run a given image processing step, for each of the vision processing subsystems modes. 1 means \"runs every frame,\" 4 every fourth frame, and so on. Inheritance Object VisionModeSetting Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class VisionModeSetting Properties high When in high \"mode\" run the image processing step every n frames. This value must be a power of two. Declaration public uint high { get; set; } Property Value Type Description UInt32 low When in low \"mode\" run the image processing step every n frames. This value must be a power of two. Declaration public uint low { get; set; } Property Value Type Description UInt32 med When in medium \"mode\" run the image processing step every n frames. This value must be a power of two. Declaration public uint med { get; set; } Property Value Type Description UInt32 mode The name of the image processing step. Declaration public string mode { get; set; } Property Value Type Description String relativeCost A \"heuristic weighting to drive separation of heavy-weight tasks between frames where 1 should indicate our lowest cost process e.g. \"Markers\" is ~16x as resource intensive as \"CheckingQuality\" Declaration public uint relativeCost { get; set; } Property Value Type Description UInt32 standard When in medium \"mode\" run the image processing step every n frames. This value must be a power of two. Declaration public uint standard { get; set; } Property Value Type Description UInt32"
  },
  "api/Anki.Resources.SDK.Weather.html": {
    "href": "api/Anki.Resources.SDK.Weather.html",
    "title": "Class Weather | Resources SDK",
    "keywords": "Class Weather The Weather behavior Inheritance Object BehaviorCoordinator Weather Inherited Members BehaviorCoordinator.IndependentSpritesUsed BehaviorCoordinator.CompositeImagesUsed Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class Weather : BehaviorCoordinator Properties Condition2Say Maps a weather condition to the text-localization key Declaration public IReadOnlyDictionary<string, string> Condition2Say { get; } Property Value Type Description IReadOnlyDictionary < String , String > WeatherCompanyCondition2Condition Maps the Weather Company weather string to Vector's weather condition Declaration public IReadOnlyDictionary<string, string> WeatherCompanyCondition2Condition { get; } Property Value Type Description IReadOnlyDictionary < String , String >"
  },
  "api/Anki.Resources.SDK.XY.html": {
    "href": "api/Anki.Resources.SDK.XY.html",
    "title": "Class XY | Resources SDK",
    "keywords": "Class XY The XY structure is used to define how a value (often the value associated with an emotion dimension) should decay with time. Inheritance Object XY Namespace : Anki.Resources.SDK Assembly : Anki.Resources.SDK.dll Syntax public class XY Properties x With time graphs, this is \"the time in seconds since the most recent event (which changed the emotion by more than some delta).\" With value slopes, this is \"the emotion value.\" Declaration public float x { get; set; } Property Value Type Description Single y With time graphs, this is \"the ratio of the original value that should be reached by the given time.\" With value slopes, this is \"the amount it decays (towards zero) per minute as a fixed amount (not a ratio).\" The value never goes below zero. Declaration public float y { get; set; } Property Value Type Description Single"
  },
  "api/Anki.VectorAnim.AnimClip.html": {
    "href": "api/Anki.VectorAnim.AnimClip.html",
    "title": "Struct AnimClip | Resources SDK",
    "keywords": "Struct AnimClip The AnimClip is a named animation that can be played. Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.VectorAnim Assembly : Anki.Resources.SDK.dll Syntax public struct AnimClip : IFlatbufferObject Properties ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer Keyframes The key frames for each of the tracks for this animation clip Declaration public Keyframes? Keyframes { get; } Property Value Type Description Nullable < Keyframes > Name The name of the animation clip; this is also called the animation trigger name. Declaration public string Name { get; } Property Value Type Description String Methods __assign(Int32, ByteBuffer) Declaration public AnimClip __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description AnimClip __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddKeyframes(FlatBufferBuilder, Offset<Keyframes>) Declaration public static void AddKeyframes(FlatBufferBuilder builder, Offset<Keyframes> keyframesOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < Keyframes > keyframesOffset AddName(FlatBufferBuilder, StringOffset) Declaration public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.StringOffset NameOffset CreateAnimClip(FlatBufferBuilder, StringOffset, Offset<Keyframes>) Declaration public static Offset<AnimClip> CreateAnimClip(FlatBufferBuilder builder, StringOffset NameOffset = default(StringOffset), Offset<Keyframes> keyframesOffset = default(Offset<Keyframes>)) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.StringOffset NameOffset FlatBuffers.Offset < Keyframes > keyframesOffset Returns Type Description FlatBuffers.Offset < AnimClip > EndAnimClip(FlatBufferBuilder) Declaration public static Offset<AnimClip> EndAnimClip(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < AnimClip > GetNameArray() Declaration public byte[] GetNameArray() Returns Type Description Byte [] GetNameBytes() Declaration public ArraySegment<byte>? GetNameBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetRootAsAnimClip(ByteBuffer) Declaration public static AnimClip GetRootAsAnimClip(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description AnimClip GetRootAsAnimClip(ByteBuffer, AnimClip) Declaration public static AnimClip GetRootAsAnimClip(ByteBuffer _bb, AnimClip obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb AnimClip obj Returns Type Description AnimClip StartAnimClip(FlatBufferBuilder) Declaration public static void StartAnimClip(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.VectorAnim.AnimClips.html": {
    "href": "api/Anki.VectorAnim.AnimClips.html",
    "title": "Struct AnimClips | Resources SDK",
    "keywords": "Struct AnimClips An animation file is defined by this structure at the top level. It provides one or more animation “clips” in the file. Each clip has one or more tracks. The file is defined by this structure at the top level Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.VectorAnim Assembly : Anki.Resources.SDK.dll Syntax public struct AnimClips : IFlatbufferObject Properties ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer ClipsLength Declaration public int ClipsLength { get; } Property Value Type Description Int32 Methods __assign(Int32, ByteBuffer) Declaration public AnimClips __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description AnimClips __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddClips(FlatBufferBuilder, VectorOffset) Declaration public static void AddClips(FlatBufferBuilder builder, VectorOffset clipsOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset clipsOffset Clips(Int32) An array of named animation clips Declaration public AnimClip? Clips(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < AnimClip > CreateAnimClips(FlatBufferBuilder, VectorOffset) Declaration public static Offset<AnimClips> CreateAnimClips(FlatBufferBuilder builder, VectorOffset clipsOffset = default(VectorOffset)) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset clipsOffset Returns Type Description FlatBuffers.Offset < AnimClips > CreateClipsVector(FlatBufferBuilder, Offset<AnimClip>[]) Declaration public static VectorOffset CreateClipsVector(FlatBufferBuilder builder, Offset<AnimClip>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < AnimClip >[] data Returns Type Description FlatBuffers.VectorOffset CreateClipsVectorBlock(FlatBufferBuilder, Offset<AnimClip>[]) Declaration public static VectorOffset CreateClipsVectorBlock(FlatBufferBuilder builder, Offset<AnimClip>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < AnimClip >[] data Returns Type Description FlatBuffers.VectorOffset EndAnimClips(FlatBufferBuilder) Declaration public static Offset<AnimClips> EndAnimClips(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < AnimClips > FinishAnimClipsBuffer(FlatBufferBuilder, Offset<AnimClips>) Declaration public static void FinishAnimClipsBuffer(FlatBufferBuilder builder, Offset<AnimClips> offset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < AnimClips > offset FinishSizePrefixedAnimClipsBuffer(FlatBufferBuilder, Offset<AnimClips>) Declaration public static void FinishSizePrefixedAnimClipsBuffer(FlatBufferBuilder builder, Offset<AnimClips> offset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < AnimClips > offset GetRootAsAnimClips(ByteBuffer) Declaration public static AnimClips GetRootAsAnimClips(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description AnimClips GetRootAsAnimClips(ByteBuffer, AnimClips) Declaration public static AnimClips GetRootAsAnimClips(ByteBuffer _bb, AnimClips obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb AnimClips obj Returns Type Description AnimClips StartAnimClips(FlatBufferBuilder) Declaration public static void StartAnimClips(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder StartClipsVector(FlatBufferBuilder, Int32) Declaration public static void StartClipsVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.VectorAnim.AudioEventGroup.html": {
    "href": "api/Anki.VectorAnim.AudioEventGroup.html",
    "title": "Struct AudioEventGroup | Resources SDK",
    "keywords": "Struct AudioEventGroup The AudioEventGroup structure is used to randomly select an audio event (and volume), and send it to the audio subsystem. Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.VectorAnim Assembly : Anki.Resources.SDK.dll Syntax public struct AudioEventGroup : IFlatbufferObject Properties ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer EventIdsLength Declaration public int EventIdsLength { get; } Property Value Type Description Int32 ProbabilitiesLength Declaration public int ProbabilitiesLength { get; } Property Value Type Description Int32 VolumesLength Declaration public int VolumesLength { get; } Property Value Type Description Int32 Methods __assign(Int32, ByteBuffer) Declaration public AudioEventGroup __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description AudioEventGroup __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddEventIds(FlatBufferBuilder, VectorOffset) Declaration public static void AddEventIds(FlatBufferBuilder builder, VectorOffset eventIdsOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset eventIdsOffset AddProbabilities(FlatBufferBuilder, VectorOffset) Declaration public static void AddProbabilities(FlatBufferBuilder builder, VectorOffset probabilitiesOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset probabilitiesOffset AddVolumes(FlatBufferBuilder, VectorOffset) Declaration public static void AddVolumes(FlatBufferBuilder builder, VectorOffset volumesOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset volumesOffset CreateAudioEventGroup(FlatBufferBuilder, VectorOffset, VectorOffset, VectorOffset) Declaration public static Offset<AudioEventGroup> CreateAudioEventGroup(FlatBufferBuilder builder, VectorOffset eventIdsOffset = default(VectorOffset), VectorOffset volumesOffset = default(VectorOffset), VectorOffset probabilitiesOffset = default(VectorOffset)) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset eventIdsOffset FlatBuffers.VectorOffset volumesOffset FlatBuffers.VectorOffset probabilitiesOffset Returns Type Description FlatBuffers.Offset < AudioEventGroup > CreateEventIdsVector(FlatBufferBuilder, UInt32[]) Declaration public static VectorOffset CreateEventIdsVector(FlatBufferBuilder builder, uint[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 [] data Returns Type Description FlatBuffers.VectorOffset CreateEventIdsVectorBlock(FlatBufferBuilder, UInt32[]) Declaration public static VectorOffset CreateEventIdsVectorBlock(FlatBufferBuilder builder, uint[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 [] data Returns Type Description FlatBuffers.VectorOffset CreateProbabilitiesVector(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateProbabilitiesVector(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateProbabilitiesVectorBlock(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateProbabilitiesVectorBlock(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateVolumesVector(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateVolumesVector(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateVolumesVectorBlock(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateVolumesVectorBlock(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset EndAudioEventGroup(FlatBufferBuilder) Declaration public static Offset<AudioEventGroup> EndAudioEventGroup(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < AudioEventGroup > EventIds(Int32) The audio event IDs, weighted by a probability. Declaration public uint EventIds(int j) Parameters Type Name Description Int32 j Returns Type Description UInt32 GetEventIdsArray() Declaration public uint[] GetEventIdsArray() Returns Type Description UInt32 [] GetEventIdsBytes() Declaration public ArraySegment<byte>? GetEventIdsBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetProbabilitiesArray() Declaration public float[] GetProbabilitiesArray() Returns Type Description Single [] GetProbabilitiesBytes() Declaration public ArraySegment<byte>? GetProbabilitiesBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetRootAsAudioEventGroup(ByteBuffer) Declaration public static AudioEventGroup GetRootAsAudioEventGroup(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description AudioEventGroup GetRootAsAudioEventGroup(ByteBuffer, AudioEventGroup) Declaration public static AudioEventGroup GetRootAsAudioEventGroup(ByteBuffer _bb, AudioEventGroup obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb AudioEventGroup obj Returns Type Description AudioEventGroup GetVolumesArray() Declaration public float[] GetVolumesArray() Returns Type Description Single [] GetVolumesBytes() Declaration public ArraySegment<byte>? GetVolumesBytes() Returns Type Description Nullable < ArraySegment < Byte >> Probabilities(Int32) The probability weight that a given event will be selected. Declaration public float Probabilities(int j) Parameters Type Name Description Int32 j Returns Type Description Single StartAudioEventGroup(FlatBufferBuilder) Declaration public static void StartAudioEventGroup(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder StartEventIdsVector(FlatBufferBuilder, Int32) Declaration public static void StartEventIdsVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartProbabilitiesVector(FlatBufferBuilder, Int32) Declaration public static void StartProbabilitiesVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartVolumesVector(FlatBufferBuilder, Int32) Declaration public static void StartVolumesVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems Volumes(Int32) The volume to play the selected audio at. Declaration public float Volumes(int j) Parameters Type Name Description Int32 j Returns Type Description Single Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.VectorAnim.AudioParameter.html": {
    "href": "api/Anki.VectorAnim.AudioParameter.html",
    "title": "Struct AudioParameter | Resources SDK",
    "keywords": "Struct AudioParameter The AudioParameter structure is used to set one of the sound parameters in the AudioKinetic Wwise subsystem. Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.VectorAnim Assembly : Anki.Resources.SDK.dll Syntax public struct AudioParameter : IFlatbufferObject Properties ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer CurveType Declaration public byte CurveType { get; } Property Value Type Description Byte ParameterID The identifier of the parameter to set. Default: 0 Declaration public uint ParameterID { get; } Property Value Type Description UInt32 TimeMs The time at which the parameter should be set. Default: 0 Declaration public uint TimeMs { get; } Property Value Type Description UInt32 Value The value to set the parameter to. Default: 0 Declaration public float Value { get; } Property Value Type Description Single Methods __assign(Int32, ByteBuffer) Declaration public AudioParameter __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description AudioParameter __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddCurveType(FlatBufferBuilder, Byte) Declaration public static void AddCurveType(FlatBufferBuilder builder, byte curveType) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Byte curveType AddParameterID(FlatBufferBuilder, UInt32) Declaration public static void AddParameterID(FlatBufferBuilder builder, uint parameterID) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 parameterID AddTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddTimeMs(FlatBufferBuilder builder, uint timeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 timeMs AddValue(FlatBufferBuilder, Single) Declaration public static void AddValue(FlatBufferBuilder builder, float value) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single value CreateAudioParameter(FlatBufferBuilder, UInt32, Single, UInt32, Byte) Declaration public static Offset<AudioParameter> CreateAudioParameter(FlatBufferBuilder builder, uint parameterID = 0U, float value = 0F, uint time_ms = 0U, byte curveType = 0) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 parameterID Single value UInt32 time_ms Byte curveType Returns Type Description FlatBuffers.Offset < AudioParameter > EndAudioParameter(FlatBufferBuilder) Declaration public static Offset<AudioParameter> EndAudioParameter(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < AudioParameter > GetRootAsAudioParameter(ByteBuffer) Declaration public static AudioParameter GetRootAsAudioParameter(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description AudioParameter GetRootAsAudioParameter(ByteBuffer, AudioParameter) Declaration public static AudioParameter GetRootAsAudioParameter(ByteBuffer _bb, AudioParameter obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb AudioParameter obj Returns Type Description AudioParameter StartAudioParameter(FlatBufferBuilder) Declaration public static void StartAudioParameter(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.VectorAnim.AudioState.html": {
    "href": "api/Anki.VectorAnim.AudioState.html",
    "title": "Struct AudioState | Resources SDK",
    "keywords": "Struct AudioState The AudioState structure is used to put the audio system into a particular state. Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.VectorAnim Assembly : Anki.Resources.SDK.dll Syntax public struct AudioState : IFlatbufferObject Properties ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer StateGroupId The state group to modify. Default: 0 Declaration public uint StateGroupId { get; } Property Value Type Description UInt32 StateId The new state to put the group into. Default: 0 Declaration public uint StateId { get; } Property Value Type Description UInt32 Methods __assign(Int32, ByteBuffer) Declaration public AudioState __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description AudioState __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddStateGroupId(FlatBufferBuilder, UInt32) Declaration public static void AddStateGroupId(FlatBufferBuilder builder, uint stateGroupId) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 stateGroupId AddStateId(FlatBufferBuilder, UInt32) Declaration public static void AddStateId(FlatBufferBuilder builder, uint stateId) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 stateId CreateAudioState(FlatBufferBuilder, UInt32, UInt32) Declaration public static Offset<AudioState> CreateAudioState(FlatBufferBuilder builder, uint stateGroupId = 0U, uint stateId = 0U) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 stateGroupId UInt32 stateId Returns Type Description FlatBuffers.Offset < AudioState > EndAudioState(FlatBufferBuilder) Declaration public static Offset<AudioState> EndAudioState(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < AudioState > GetRootAsAudioState(ByteBuffer) Declaration public static AudioState GetRootAsAudioState(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description AudioState GetRootAsAudioState(ByteBuffer, AudioState) Declaration public static AudioState GetRootAsAudioState(ByteBuffer _bb, AudioState obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb AudioState obj Returns Type Description AudioState StartAudioState(FlatBufferBuilder) Declaration public static void StartAudioState(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.VectorAnim.AudioSwitch.html": {
    "href": "api/Anki.VectorAnim.AudioSwitch.html",
    "title": "Struct AudioSwitch | Resources SDK",
    "keywords": "Struct AudioSwitch The AudioSwitch structure is used to put an audio switch into a particular setting. Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.VectorAnim Assembly : Anki.Resources.SDK.dll Syntax public struct AudioSwitch : IFlatbufferObject Properties ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer StateId The new state to the put the switch into. Default: 0 Declaration public uint StateId { get; } Property Value Type Description UInt32 SwitchGroupId The switch to modify. Default: 0 Declaration public uint SwitchGroupId { get; } Property Value Type Description UInt32 Methods __assign(Int32, ByteBuffer) Declaration public AudioSwitch __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description AudioSwitch __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddStateId(FlatBufferBuilder, UInt32) Declaration public static void AddStateId(FlatBufferBuilder builder, uint stateId) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 stateId AddSwitchGroupId(FlatBufferBuilder, UInt32) Declaration public static void AddSwitchGroupId(FlatBufferBuilder builder, uint switchGroupId) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 switchGroupId CreateAudioSwitch(FlatBufferBuilder, UInt32, UInt32) Declaration public static Offset<AudioSwitch> CreateAudioSwitch(FlatBufferBuilder builder, uint switchGroupId = 0U, uint stateId = 0U) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 switchGroupId UInt32 stateId Returns Type Description FlatBuffers.Offset < AudioSwitch > EndAudioSwitch(FlatBufferBuilder) Declaration public static Offset<AudioSwitch> EndAudioSwitch(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < AudioSwitch > GetRootAsAudioSwitch(ByteBuffer) Declaration public static AudioSwitch GetRootAsAudioSwitch(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description AudioSwitch GetRootAsAudioSwitch(ByteBuffer, AudioSwitch) Declaration public static AudioSwitch GetRootAsAudioSwitch(ByteBuffer _bb, AudioSwitch obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb AudioSwitch obj Returns Type Description AudioSwitch StartAudioSwitch(FlatBufferBuilder) Declaration public static void StartAudioSwitch(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.VectorAnim.BackpackLights.html": {
    "href": "api/Anki.VectorAnim.BackpackLights.html",
    "title": "Struct BackpackLights | Resources SDK",
    "keywords": "Struct BackpackLights The BackpackLights structure is used to animate the lights on Vector’s back. Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.VectorAnim Assembly : Anki.Resources.SDK.dll Syntax public struct BackpackLights : IFlatbufferObject Properties BackLength Declaration public int BackLength { get; } Property Value Type Description Int32 ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer DurationTimeMs The duration before a transition to the next backlight setting may begin. During this time the lights should be illuminated with these colors; after this the colors may transition from these to the next colors. Declaration public uint DurationTimeMs { get; } Property Value Type Description UInt32 FrontLength Declaration public int FrontLength { get; } Property Value Type Description Int32 MiddleLength Declaration public int MiddleLength { get; } Property Value Type Description Int32 TriggerTimeMs The time at which the backlights animation should begin. Declaration public uint TriggerTimeMs { get; } Property Value Type Description UInt32 Methods __assign(Int32, ByteBuffer) Declaration public BackpackLights __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description BackpackLights __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddBack(FlatBufferBuilder, VectorOffset) Declaration public static void AddBack(FlatBufferBuilder builder, VectorOffset BackOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset BackOffset AddDurationTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddDurationTimeMs(FlatBufferBuilder builder, uint durationTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 durationTimeMs AddFront(FlatBufferBuilder, VectorOffset) Declaration public static void AddFront(FlatBufferBuilder builder, VectorOffset FrontOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset FrontOffset AddMiddle(FlatBufferBuilder, VectorOffset) Declaration public static void AddMiddle(FlatBufferBuilder builder, VectorOffset MiddleOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset MiddleOffset AddTriggerTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTimeMs Back(Int32) Each color is represented as 4 floats (red, green, blue, and alpha), in the range 0..1. Alpha is always 0 (the value is ignored). Declaration public float Back(int j) Parameters Type Name Description Int32 j Returns Type Description Single CreateBackpackLights(FlatBufferBuilder, UInt32, UInt32, VectorOffset, VectorOffset, VectorOffset) Declaration public static Offset<BackpackLights> CreateBackpackLights(FlatBufferBuilder builder, uint triggerTime_ms = 0U, uint durationTime_ms = 0U, VectorOffset FrontOffset = default(VectorOffset), VectorOffset MiddleOffset = default(VectorOffset), VectorOffset BackOffset = default(VectorOffset)) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTime_ms UInt32 durationTime_ms FlatBuffers.VectorOffset FrontOffset FlatBuffers.VectorOffset MiddleOffset FlatBuffers.VectorOffset BackOffset Returns Type Description FlatBuffers.Offset < BackpackLights > CreateBackVector(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateBackVector(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateBackVectorBlock(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateBackVectorBlock(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateFrontVector(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateFrontVector(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateFrontVectorBlock(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateFrontVectorBlock(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateMiddleVector(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateMiddleVector(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateMiddleVectorBlock(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateMiddleVectorBlock(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset EndBackpackLights(FlatBufferBuilder) Declaration public static Offset<BackpackLights> EndBackpackLights(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < BackpackLights > Front(Int32) Each color is represented as 4 floats (red, green, blue, and alpha), in the range 0..1. Alpha is always 0 (the value is ignored). Declaration public float Front(int j) Parameters Type Name Description Int32 j Returns Type Description Single GetBackArray() Declaration public float[] GetBackArray() Returns Type Description Single [] GetBackBytes() Declaration public ArraySegment<byte>? GetBackBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetFrontArray() Declaration public float[] GetFrontArray() Returns Type Description Single [] GetFrontBytes() Declaration public ArraySegment<byte>? GetFrontBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetMiddleArray() Declaration public float[] GetMiddleArray() Returns Type Description Single [] GetMiddleBytes() Declaration public ArraySegment<byte>? GetMiddleBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetRootAsBackpackLights(ByteBuffer) Declaration public static BackpackLights GetRootAsBackpackLights(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description BackpackLights GetRootAsBackpackLights(ByteBuffer, BackpackLights) Declaration public static BackpackLights GetRootAsBackpackLights(ByteBuffer _bb, BackpackLights obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb BackpackLights obj Returns Type Description BackpackLights Middle(Int32) Each color is represented as 4 floats (red, green, blue, and alpha), in the range 0..1. Alpha is always 0 (the value is ignored). Declaration public float Middle(int j) Parameters Type Name Description Int32 j Returns Type Description Single StartBackpackLights(FlatBufferBuilder) Declaration public static void StartBackpackLights(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder StartBackVector(FlatBufferBuilder, Int32) Declaration public static void StartBackVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartFrontVector(FlatBufferBuilder, Int32) Declaration public static void StartFrontVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartMiddleVector(FlatBufferBuilder, Int32) Declaration public static void StartMiddleVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.VectorAnim.FaceAnimation.html": {
    "href": "api/Anki.VectorAnim.FaceAnimation.html",
    "title": "Struct FaceAnimation | Resources SDK",
    "keywords": "Struct FaceAnimation The FaceAnimation structure is used to specify the JSON file to animation Vector’s display. Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.VectorAnim Assembly : Anki.Resources.SDK.dll Syntax public struct FaceAnimation : IFlatbufferObject Properties AnimName The time at the face animation should begin. Declaration public string AnimName { get; } Property Value Type Description String ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer ScanlineOpacity This is new for Vector. Default: 1.0 Declaration public float ScanlineOpacity { get; } Property Value Type Description Single TriggerTimeMs The time at the face animation should begin. Declaration public uint TriggerTimeMs { get; } Property Value Type Description UInt32 Methods __assign(Int32, ByteBuffer) Declaration public FaceAnimation __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description FaceAnimation __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddAnimName(FlatBufferBuilder, StringOffset) Declaration public static void AddAnimName(FlatBufferBuilder builder, StringOffset animNameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.StringOffset animNameOffset AddScanlineOpacity(FlatBufferBuilder, Single) Declaration public static void AddScanlineOpacity(FlatBufferBuilder builder, float scanlineOpacity) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single scanlineOpacity AddTriggerTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTimeMs CreateFaceAnimation(FlatBufferBuilder, UInt32, StringOffset, Single) Declaration public static Offset<FaceAnimation> CreateFaceAnimation(FlatBufferBuilder builder, uint triggerTime_ms = 0U, StringOffset animNameOffset = default(StringOffset), float scanlineOpacity = 1F) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTime_ms FlatBuffers.StringOffset animNameOffset Single scanlineOpacity Returns Type Description FlatBuffers.Offset < FaceAnimation > EndFaceAnimation(FlatBufferBuilder) Declaration public static Offset<FaceAnimation> EndFaceAnimation(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < FaceAnimation > GetAnimNameArray() Declaration public byte[] GetAnimNameArray() Returns Type Description Byte [] GetAnimNameBytes() Declaration public ArraySegment<byte>? GetAnimNameBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetRootAsFaceAnimation(ByteBuffer) Declaration public static FaceAnimation GetRootAsFaceAnimation(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description FaceAnimation GetRootAsFaceAnimation(ByteBuffer, FaceAnimation) Declaration public static FaceAnimation GetRootAsFaceAnimation(ByteBuffer _bb, FaceAnimation obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb FaceAnimation obj Returns Type Description FaceAnimation StartFaceAnimation(FlatBufferBuilder) Declaration public static void StartFaceAnimation(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.VectorAnim.html": {
    "href": "api/Anki.VectorAnim.html",
    "title": "| Resources SDK",
    "keywords": "Structs AnimClip The AnimClip is a named animation that can be played. AnimClips An animation file is defined by this structure at the top level. It provides one or more animation “clips” in the file. Each clip has one or more tracks. The file is defined by this structure at the top level AudioEventGroup The AudioEventGroup structure is used to randomly select an audio event (and volume), and send it to the audio subsystem. AudioParameter The AudioParameter structure is used to set one of the sound parameters in the AudioKinetic Wwise subsystem. AudioState The AudioState structure is used to put the audio system into a particular state. AudioSwitch The AudioSwitch structure is used to put an audio switch into a particular setting. BackpackLights The BackpackLights structure is used to animate the lights on Vector’s back. FaceAnimation The FaceAnimation structure is used to specify the JSON file to animation Vector’s display. Keyframes The KeyFrames structure provides separate time-coded key frames for each of the possible tracks in the animation. The tracks are optional. There tracks may have different numbers of key frames. The key frames do not need to start at the same time(s). ProceduralFace RobotAudio The RobotAudio structure is used to interact with the audio engine. SpriteBox The SpriteBox structure defines a rectangular region on the display to draw an image from a file."
  },
  "api/Anki.VectorAnim.Keyframes.html": {
    "href": "api/Anki.VectorAnim.Keyframes.html",
    "title": "Struct Keyframes | Resources SDK",
    "keywords": "Struct Keyframes The KeyFrames structure provides separate time-coded key frames for each of the possible tracks in the animation. The tracks are optional. There tracks may have different numbers of key frames. The key frames do not need to start at the same time(s). Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.VectorAnim Assembly : Anki.Resources.SDK.dll Syntax public struct Keyframes : IFlatbufferObject Properties BackpackLightsKeyFrameLength Declaration public int BackpackLightsKeyFrameLength { get; } Property Value Type Description Int32 BodyMotionKeyFrameLength Declaration public int BodyMotionKeyFrameLength { get; } Property Value Type Description Int32 ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer EventKeyFrameLength Declaration public int EventKeyFrameLength { get; } Property Value Type Description Int32 FaceAnimationKeyFrameLength Declaration public int FaceAnimationKeyFrameLength { get; } Property Value Type Description Int32 HeadAngleKeyFrameLength Declaration public int HeadAngleKeyFrameLength { get; } Property Value Type Description Int32 LiftHeightKeyFrameLength Declaration public int LiftHeightKeyFrameLength { get; } Property Value Type Description Int32 ProceduralFaceKeyFrameLength Declaration public int ProceduralFaceKeyFrameLength { get; } Property Value Type Description Int32 RecordHeadingKeyFrameLength Declaration public int RecordHeadingKeyFrameLength { get; } Property Value Type Description Int32 RobotAudioKeyFrameLength Declaration public int RobotAudioKeyFrameLength { get; } Property Value Type Description Int32 SpriteBoxKeyFrameLength Declaration public int SpriteBoxKeyFrameLength { get; } Property Value Type Description Int32 TurnToRecordedHeadingKeyFrameLength Declaration public int TurnToRecordedHeadingKeyFrameLength { get; } Property Value Type Description Int32 Methods __assign(Int32, ByteBuffer) Declaration public Keyframes __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description Keyframes __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddBackpackLightsKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddBackpackLightsKeyFrame(FlatBufferBuilder builder, VectorOffset BackpackLightsKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset BackpackLightsKeyFrameOffset AddBodyMotionKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddBodyMotionKeyFrame(FlatBufferBuilder builder, VectorOffset BodyMotionKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset BodyMotionKeyFrameOffset AddEventKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddEventKeyFrame(FlatBufferBuilder builder, VectorOffset EventKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset EventKeyFrameOffset AddFaceAnimationKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddFaceAnimationKeyFrame(FlatBufferBuilder builder, VectorOffset FaceAnimationKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset FaceAnimationKeyFrameOffset AddHeadAngleKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddHeadAngleKeyFrame(FlatBufferBuilder builder, VectorOffset HeadAngleKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset HeadAngleKeyFrameOffset AddLiftHeightKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddLiftHeightKeyFrame(FlatBufferBuilder builder, VectorOffset LiftHeightKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset LiftHeightKeyFrameOffset AddProceduralFaceKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddProceduralFaceKeyFrame(FlatBufferBuilder builder, VectorOffset ProceduralFaceKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset ProceduralFaceKeyFrameOffset AddRecordHeadingKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddRecordHeadingKeyFrame(FlatBufferBuilder builder, VectorOffset RecordHeadingKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset RecordHeadingKeyFrameOffset AddRobotAudioKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddRobotAudioKeyFrame(FlatBufferBuilder builder, VectorOffset RobotAudioKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset RobotAudioKeyFrameOffset AddSpriteBoxKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddSpriteBoxKeyFrame(FlatBufferBuilder builder, VectorOffset SpriteBoxKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset SpriteBoxKeyFrameOffset AddTurnToRecordedHeadingKeyFrame(FlatBufferBuilder, VectorOffset) Declaration public static void AddTurnToRecordedHeadingKeyFrame(FlatBufferBuilder builder, VectorOffset TurnToRecordedHeadingKeyFrameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset TurnToRecordedHeadingKeyFrameOffset BackpackLightsKeyFrame(Int32) Declaration public BackpackLights? BackpackLightsKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < BackpackLights > BodyMotionKeyFrame(Int32) A series of key frames to drive and turn the body. Declaration public BodyMotion? BodyMotionKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < BodyMotion > CreateBackpackLightsKeyFrameVector(FlatBufferBuilder, Offset<BackpackLights>[]) Declaration public static VectorOffset CreateBackpackLightsKeyFrameVector(FlatBufferBuilder builder, Offset<BackpackLights>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < BackpackLights >[] data Returns Type Description FlatBuffers.VectorOffset CreateBackpackLightsKeyFrameVectorBlock(FlatBufferBuilder, Offset<BackpackLights>[]) Declaration public static VectorOffset CreateBackpackLightsKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<BackpackLights>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < BackpackLights >[] data Returns Type Description FlatBuffers.VectorOffset CreateBodyMotionKeyFrameVector(FlatBufferBuilder, Offset<BodyMotion>[]) Declaration public static VectorOffset CreateBodyMotionKeyFrameVector(FlatBufferBuilder builder, Offset<BodyMotion>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < BodyMotion >[] data Returns Type Description FlatBuffers.VectorOffset CreateBodyMotionKeyFrameVectorBlock(FlatBufferBuilder, Offset<BodyMotion>[]) Declaration public static VectorOffset CreateBodyMotionKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<BodyMotion>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < BodyMotion >[] data Returns Type Description FlatBuffers.VectorOffset CreateEventKeyFrameVector(FlatBufferBuilder, Offset<Event>[]) Declaration public static VectorOffset CreateEventKeyFrameVector(FlatBufferBuilder builder, Offset<Event>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < Event >[] data Returns Type Description FlatBuffers.VectorOffset CreateEventKeyFrameVectorBlock(FlatBufferBuilder, Offset<Event>[]) Declaration public static VectorOffset CreateEventKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<Event>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < Event >[] data Returns Type Description FlatBuffers.VectorOffset CreateFaceAnimationKeyFrameVector(FlatBufferBuilder, Offset<FaceAnimation>[]) Declaration public static VectorOffset CreateFaceAnimationKeyFrameVector(FlatBufferBuilder builder, Offset<FaceAnimation>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < FaceAnimation >[] data Returns Type Description FlatBuffers.VectorOffset CreateFaceAnimationKeyFrameVectorBlock(FlatBufferBuilder, Offset<FaceAnimation>[]) Declaration public static VectorOffset CreateFaceAnimationKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<FaceAnimation>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < FaceAnimation >[] data Returns Type Description FlatBuffers.VectorOffset CreateHeadAngleKeyFrameVector(FlatBufferBuilder, Offset<HeadAngle>[]) Declaration public static VectorOffset CreateHeadAngleKeyFrameVector(FlatBufferBuilder builder, Offset<HeadAngle>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < HeadAngle >[] data Returns Type Description FlatBuffers.VectorOffset CreateHeadAngleKeyFrameVectorBlock(FlatBufferBuilder, Offset<HeadAngle>[]) Declaration public static VectorOffset CreateHeadAngleKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<HeadAngle>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < HeadAngle >[] data Returns Type Description FlatBuffers.VectorOffset CreateKeyframes(FlatBufferBuilder, VectorOffset, VectorOffset, VectorOffset, VectorOffset, VectorOffset, VectorOffset, VectorOffset, VectorOffset, VectorOffset, VectorOffset, VectorOffset) Declaration public static Offset<Keyframes> CreateKeyframes(FlatBufferBuilder builder, VectorOffset LiftHeightKeyFrameOffset = default(VectorOffset), VectorOffset ProceduralFaceKeyFrameOffset = default(VectorOffset), VectorOffset HeadAngleKeyFrameOffset = default(VectorOffset), VectorOffset RobotAudioKeyFrameOffset = default(VectorOffset), VectorOffset BackpackLightsKeyFrameOffset = default(VectorOffset), VectorOffset FaceAnimationKeyFrameOffset = default(VectorOffset), VectorOffset EventKeyFrameOffset = default(VectorOffset), VectorOffset BodyMotionKeyFrameOffset = default(VectorOffset), VectorOffset RecordHeadingKeyFrameOffset = default(VectorOffset), VectorOffset TurnToRecordedHeadingKeyFrameOffset = default(VectorOffset), VectorOffset SpriteBoxKeyFrameOffset = default(VectorOffset)) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset LiftHeightKeyFrameOffset FlatBuffers.VectorOffset ProceduralFaceKeyFrameOffset FlatBuffers.VectorOffset HeadAngleKeyFrameOffset FlatBuffers.VectorOffset RobotAudioKeyFrameOffset FlatBuffers.VectorOffset BackpackLightsKeyFrameOffset FlatBuffers.VectorOffset FaceAnimationKeyFrameOffset FlatBuffers.VectorOffset EventKeyFrameOffset FlatBuffers.VectorOffset BodyMotionKeyFrameOffset FlatBuffers.VectorOffset RecordHeadingKeyFrameOffset FlatBuffers.VectorOffset TurnToRecordedHeadingKeyFrameOffset FlatBuffers.VectorOffset SpriteBoxKeyFrameOffset Returns Type Description FlatBuffers.Offset < Keyframes > CreateLiftHeightKeyFrameVector(FlatBufferBuilder, Offset<LiftHeight>[]) Declaration public static VectorOffset CreateLiftHeightKeyFrameVector(FlatBufferBuilder builder, Offset<LiftHeight>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < LiftHeight >[] data Returns Type Description FlatBuffers.VectorOffset CreateLiftHeightKeyFrameVectorBlock(FlatBufferBuilder, Offset<LiftHeight>[]) Declaration public static VectorOffset CreateLiftHeightKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<LiftHeight>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < LiftHeight >[] data Returns Type Description FlatBuffers.VectorOffset CreateProceduralFaceKeyFrameVector(FlatBufferBuilder, Offset<ProceduralFace>[]) Declaration public static VectorOffset CreateProceduralFaceKeyFrameVector(FlatBufferBuilder builder, Offset<ProceduralFace>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < ProceduralFace >[] data Returns Type Description FlatBuffers.VectorOffset CreateProceduralFaceKeyFrameVectorBlock(FlatBufferBuilder, Offset<ProceduralFace>[]) Declaration public static VectorOffset CreateProceduralFaceKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<ProceduralFace>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < ProceduralFace >[] data Returns Type Description FlatBuffers.VectorOffset CreateRecordHeadingKeyFrameVector(FlatBufferBuilder, Offset<RecordHeading>[]) Declaration public static VectorOffset CreateRecordHeadingKeyFrameVector(FlatBufferBuilder builder, Offset<RecordHeading>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < RecordHeading >[] data Returns Type Description FlatBuffers.VectorOffset CreateRecordHeadingKeyFrameVectorBlock(FlatBufferBuilder, Offset<RecordHeading>[]) Declaration public static VectorOffset CreateRecordHeadingKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<RecordHeading>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < RecordHeading >[] data Returns Type Description FlatBuffers.VectorOffset CreateRobotAudioKeyFrameVector(FlatBufferBuilder, Offset<RobotAudio>[]) Declaration public static VectorOffset CreateRobotAudioKeyFrameVector(FlatBufferBuilder builder, Offset<RobotAudio>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < RobotAudio >[] data Returns Type Description FlatBuffers.VectorOffset CreateRobotAudioKeyFrameVectorBlock(FlatBufferBuilder, Offset<RobotAudio>[]) Declaration public static VectorOffset CreateRobotAudioKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<RobotAudio>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < RobotAudio >[] data Returns Type Description FlatBuffers.VectorOffset CreateSpriteBoxKeyFrameVector(FlatBufferBuilder, Offset<SpriteBox>[]) Declaration public static VectorOffset CreateSpriteBoxKeyFrameVector(FlatBufferBuilder builder, Offset<SpriteBox>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < SpriteBox >[] data Returns Type Description FlatBuffers.VectorOffset CreateSpriteBoxKeyFrameVectorBlock(FlatBufferBuilder, Offset<SpriteBox>[]) Declaration public static VectorOffset CreateSpriteBoxKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<SpriteBox>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < SpriteBox >[] data Returns Type Description FlatBuffers.VectorOffset CreateTurnToRecordedHeadingKeyFrameVector(FlatBufferBuilder, Offset<TurnToRecordedHeading>[]) Declaration public static VectorOffset CreateTurnToRecordedHeadingKeyFrameVector(FlatBufferBuilder builder, Offset<TurnToRecordedHeading>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < TurnToRecordedHeading >[] data Returns Type Description FlatBuffers.VectorOffset CreateTurnToRecordedHeadingKeyFrameVectorBlock(FlatBufferBuilder, Offset<TurnToRecordedHeading>[]) Declaration public static VectorOffset CreateTurnToRecordedHeadingKeyFrameVectorBlock(FlatBufferBuilder builder, Offset<TurnToRecordedHeading>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < TurnToRecordedHeading >[] data Returns Type Description FlatBuffers.VectorOffset EndKeyframes(FlatBufferBuilder) Declaration public static Offset<Keyframes> EndKeyframes(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < Keyframes > EventKeyFrame(Int32) Note: many behaviors do not support event key frames; those that do expect a specific event, and number of event key frames. Declaration public Event? EventKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < Event > FaceAnimationKeyFrame(Int32) A series of key frames describing when and how the face should move. Declaration public FaceAnimation? FaceAnimationKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < FaceAnimation > GetRootAsKeyframes(ByteBuffer) Declaration public static Keyframes GetRootAsKeyframes(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description Keyframes GetRootAsKeyframes(ByteBuffer, Keyframes) Declaration public static Keyframes GetRootAsKeyframes(ByteBuffer _bb, Keyframes obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Keyframes obj Returns Type Description Keyframes HeadAngleKeyFrame(Int32) A series of key frames describing when and how the head should move. Declaration public HeadAngle? HeadAngleKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < HeadAngle > LiftHeightKeyFrame(Int32) A series of key frames describing when and how the lift should move. Declaration public LiftHeight? LiftHeightKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < LiftHeight > ProceduralFaceKeyFrame(Int32) A series of key frames describing when and how the eyes should move. Declaration public ProceduralFace? ProceduralFaceKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < ProceduralFace > RecordHeadingKeyFrame(Int32) A series of key frames to record the current heading of the robot so that the animation can return to them later. Declaration public RecordHeading? RecordHeadingKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < RecordHeading > RobotAudioKeyFrame(Int32) A series of key frames describing when and how audio should be played. Declaration public RobotAudio? RobotAudioKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < RobotAudio > SpriteBoxKeyFrame(Int32) A series of key frames for the visual sprite box animation. New in version 1.7. Declaration public SpriteBox? SpriteBoxKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < SpriteBox > StartBackpackLightsKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartBackpackLightsKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartBodyMotionKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartBodyMotionKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartEventKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartEventKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartFaceAnimationKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartFaceAnimationKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartHeadAngleKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartHeadAngleKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartKeyframes(FlatBufferBuilder) Declaration public static void StartKeyframes(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder StartLiftHeightKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartLiftHeightKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartProceduralFaceKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartProceduralFaceKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartRecordHeadingKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartRecordHeadingKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartRobotAudioKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartRobotAudioKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartSpriteBoxKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartSpriteBoxKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartTurnToRecordedHeadingKeyFrameVector(FlatBufferBuilder, Int32) Declaration public static void StartTurnToRecordedHeadingKeyFrameVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems TurnToRecordedHeadingKeyFrame(Int32) A series of key frames used to return the robot so a previously saved heading after a movement. Declaration public TurnToRecordedHeading? TurnToRecordedHeadingKeyFrame(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < TurnToRecordedHeading > Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.VectorAnim.ProceduralFace.html": {
    "href": "api/Anki.VectorAnim.ProceduralFace.html",
    "title": "Struct ProceduralFace | Resources SDK",
    "keywords": "Struct ProceduralFace Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.VectorAnim Assembly : Anki.Resources.SDK.dll Syntax public struct ProceduralFace : IFlatbufferObject Properties ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer FaceAngle Declaration public float FaceAngle { get; } Property Value Type Description Single FaceCenterX Declaration public float FaceCenterX { get; } Property Value Type Description Single FaceCenterY Declaration public float FaceCenterY { get; } Property Value Type Description Single FaceScaleX Declaration public float FaceScaleX { get; } Property Value Type Description Single FaceScaleY Declaration public float FaceScaleY { get; } Property Value Type Description Single LeftEyeLength Declaration public int LeftEyeLength { get; } Property Value Type Description Int32 RightEyeLength Declaration public int RightEyeLength { get; } Property Value Type Description Int32 ScanlineOpacity Declaration public float ScanlineOpacity { get; } Property Value Type Description Single TriggerTimeMs Declaration public uint TriggerTimeMs { get; } Property Value Type Description UInt32 Methods __assign(Int32, ByteBuffer) Declaration public ProceduralFace __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description ProceduralFace __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddFaceAngle(FlatBufferBuilder, Single) Declaration public static void AddFaceAngle(FlatBufferBuilder builder, float faceAngle) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single faceAngle AddFaceCenterX(FlatBufferBuilder, Single) Declaration public static void AddFaceCenterX(FlatBufferBuilder builder, float faceCenterX) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single faceCenterX AddFaceCenterY(FlatBufferBuilder, Single) Declaration public static void AddFaceCenterY(FlatBufferBuilder builder, float faceCenterY) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single faceCenterY AddFaceScaleX(FlatBufferBuilder, Single) Declaration public static void AddFaceScaleX(FlatBufferBuilder builder, float faceScaleX) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single faceScaleX AddFaceScaleY(FlatBufferBuilder, Single) Declaration public static void AddFaceScaleY(FlatBufferBuilder builder, float faceScaleY) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single faceScaleY AddLeftEye(FlatBufferBuilder, VectorOffset) Declaration public static void AddLeftEye(FlatBufferBuilder builder, VectorOffset leftEyeOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset leftEyeOffset AddRightEye(FlatBufferBuilder, VectorOffset) Declaration public static void AddRightEye(FlatBufferBuilder builder, VectorOffset rightEyeOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset rightEyeOffset AddScanlineOpacity(FlatBufferBuilder, Single) Declaration public static void AddScanlineOpacity(FlatBufferBuilder builder, float scanlineOpacity) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single scanlineOpacity AddTriggerTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTimeMs CreateLeftEyeVector(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateLeftEyeVector(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateLeftEyeVectorBlock(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateLeftEyeVectorBlock(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateProceduralFace(FlatBufferBuilder, UInt32, Single, Single, Single, Single, Single, VectorOffset, VectorOffset, Single) Declaration public static Offset<ProceduralFace> CreateProceduralFace(FlatBufferBuilder builder, uint triggerTime_ms = 0U, float faceAngle = 0F, float faceCenterX = 0F, float faceCenterY = 0F, float faceScaleX = 1F, float faceScaleY = 1F, VectorOffset leftEyeOffset = default(VectorOffset), VectorOffset rightEyeOffset = default(VectorOffset), float scanlineOpacity = 1F) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTime_ms Single faceAngle Single faceCenterX Single faceCenterY Single faceScaleX Single faceScaleY FlatBuffers.VectorOffset leftEyeOffset FlatBuffers.VectorOffset rightEyeOffset Single scanlineOpacity Returns Type Description FlatBuffers.Offset < ProceduralFace > CreateRightEyeVector(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateRightEyeVector(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset CreateRightEyeVectorBlock(FlatBufferBuilder, Single[]) Declaration public static VectorOffset CreateRightEyeVectorBlock(FlatBufferBuilder builder, float[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single [] data Returns Type Description FlatBuffers.VectorOffset EndProceduralFace(FlatBufferBuilder) Declaration public static Offset<ProceduralFace> EndProceduralFace(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < ProceduralFace > GetLeftEyeArray() Declaration public float[] GetLeftEyeArray() Returns Type Description Single [] GetLeftEyeBytes() Declaration public ArraySegment<byte>? GetLeftEyeBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetRightEyeArray() Declaration public float[] GetRightEyeArray() Returns Type Description Single [] GetRightEyeBytes() Declaration public ArraySegment<byte>? GetRightEyeBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetRootAsProceduralFace(ByteBuffer) Declaration public static ProceduralFace GetRootAsProceduralFace(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description ProceduralFace GetRootAsProceduralFace(ByteBuffer, ProceduralFace) Declaration public static ProceduralFace GetRootAsProceduralFace(ByteBuffer _bb, ProceduralFace obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb ProceduralFace obj Returns Type Description ProceduralFace LeftEye(Int32) Declaration public float LeftEye(int j) Parameters Type Name Description Int32 j Returns Type Description Single RightEye(Int32) Declaration public float RightEye(int j) Parameters Type Name Description Int32 j Returns Type Description Single StartLeftEyeVector(FlatBufferBuilder, Int32) Declaration public static void StartLeftEyeVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartProceduralFace(FlatBufferBuilder) Declaration public static void StartProceduralFace(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder StartRightEyeVector(FlatBufferBuilder, Int32) Declaration public static void StartRightEyeVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.VectorAnim.RobotAudio.html": {
    "href": "api/Anki.VectorAnim.RobotAudio.html",
    "title": "Struct RobotAudio | Resources SDK",
    "keywords": "Struct RobotAudio The RobotAudio structure is used to interact with the audio engine. Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.VectorAnim Assembly : Anki.Resources.SDK.dll Syntax public struct RobotAudio : IFlatbufferObject Properties ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer EventGroupsLength Declaration public int EventGroupsLength { get; } Property Value Type Description Int32 ParametersLength Declaration public int ParametersLength { get; } Property Value Type Description Int32 StatesLength Declaration public int StatesLength { get; } Property Value Type Description Int32 SwitchesLength Declaration public int SwitchesLength { get; } Property Value Type Description Int32 TriggerTimeMs The time the audio events should be sent, and the parameters should be set. Declaration public uint TriggerTimeMs { get; } Property Value Type Description UInt32 Methods __assign(Int32, ByteBuffer) Declaration public RobotAudio __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description RobotAudio __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddEventGroups(FlatBufferBuilder, VectorOffset) Declaration public static void AddEventGroups(FlatBufferBuilder builder, VectorOffset eventGroupsOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset eventGroupsOffset AddParameters(FlatBufferBuilder, VectorOffset) Declaration public static void AddParameters(FlatBufferBuilder builder, VectorOffset parametersOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset parametersOffset AddStates(FlatBufferBuilder, VectorOffset) Declaration public static void AddStates(FlatBufferBuilder builder, VectorOffset statesOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset statesOffset AddSwitches(FlatBufferBuilder, VectorOffset) Declaration public static void AddSwitches(FlatBufferBuilder builder, VectorOffset switchesOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.VectorOffset switchesOffset AddTriggerTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTimeMs CreateEventGroupsVector(FlatBufferBuilder, Offset<AudioEventGroup>[]) Declaration public static VectorOffset CreateEventGroupsVector(FlatBufferBuilder builder, Offset<AudioEventGroup>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < AudioEventGroup >[] data Returns Type Description FlatBuffers.VectorOffset CreateEventGroupsVectorBlock(FlatBufferBuilder, Offset<AudioEventGroup>[]) Declaration public static VectorOffset CreateEventGroupsVectorBlock(FlatBufferBuilder builder, Offset<AudioEventGroup>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < AudioEventGroup >[] data Returns Type Description FlatBuffers.VectorOffset CreateParametersVector(FlatBufferBuilder, Offset<AudioParameter>[]) Declaration public static VectorOffset CreateParametersVector(FlatBufferBuilder builder, Offset<AudioParameter>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < AudioParameter >[] data Returns Type Description FlatBuffers.VectorOffset CreateParametersVectorBlock(FlatBufferBuilder, Offset<AudioParameter>[]) Declaration public static VectorOffset CreateParametersVectorBlock(FlatBufferBuilder builder, Offset<AudioParameter>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < AudioParameter >[] data Returns Type Description FlatBuffers.VectorOffset CreateRobotAudio(FlatBufferBuilder, UInt32, VectorOffset, VectorOffset, VectorOffset, VectorOffset) Declaration public static Offset<RobotAudio> CreateRobotAudio(FlatBufferBuilder builder, uint triggerTime_ms = 0U, VectorOffset eventGroupsOffset = default(VectorOffset), VectorOffset statesOffset = default(VectorOffset), VectorOffset switchesOffset = default(VectorOffset), VectorOffset parametersOffset = default(VectorOffset)) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTime_ms FlatBuffers.VectorOffset eventGroupsOffset FlatBuffers.VectorOffset statesOffset FlatBuffers.VectorOffset switchesOffset FlatBuffers.VectorOffset parametersOffset Returns Type Description FlatBuffers.Offset < RobotAudio > CreateStatesVector(FlatBufferBuilder, Offset<AudioState>[]) Declaration public static VectorOffset CreateStatesVector(FlatBufferBuilder builder, Offset<AudioState>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < AudioState >[] data Returns Type Description FlatBuffers.VectorOffset CreateStatesVectorBlock(FlatBufferBuilder, Offset<AudioState>[]) Declaration public static VectorOffset CreateStatesVectorBlock(FlatBufferBuilder builder, Offset<AudioState>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < AudioState >[] data Returns Type Description FlatBuffers.VectorOffset CreateSwitchesVector(FlatBufferBuilder, Offset<AudioSwitch>[]) Declaration public static VectorOffset CreateSwitchesVector(FlatBufferBuilder builder, Offset<AudioSwitch>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < AudioSwitch >[] data Returns Type Description FlatBuffers.VectorOffset CreateSwitchesVectorBlock(FlatBufferBuilder, Offset<AudioSwitch>[]) Declaration public static VectorOffset CreateSwitchesVectorBlock(FlatBufferBuilder builder, Offset<AudioSwitch>[] data) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.Offset < AudioSwitch >[] data Returns Type Description FlatBuffers.VectorOffset EndRobotAudio(FlatBufferBuilder) Declaration public static Offset<RobotAudio> EndRobotAudio(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < RobotAudio > EventGroups(Int32) The set of possible audio events to send. Declaration public AudioEventGroup? EventGroups(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < AudioEventGroup > GetRootAsRobotAudio(ByteBuffer) Declaration public static RobotAudio GetRootAsRobotAudio(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description RobotAudio GetRootAsRobotAudio(ByteBuffer, RobotAudio) Declaration public static RobotAudio GetRootAsRobotAudio(ByteBuffer _bb, RobotAudio obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb RobotAudio obj Returns Type Description RobotAudio Parameters(Int32) The set of changes to make to the audio playback parameters. Declaration public AudioParameter? Parameters(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < AudioParameter > StartEventGroupsVector(FlatBufferBuilder, Int32) Declaration public static void StartEventGroupsVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartParametersVector(FlatBufferBuilder, Int32) Declaration public static void StartParametersVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartRobotAudio(FlatBufferBuilder) Declaration public static void StartRobotAudio(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder StartStatesVector(FlatBufferBuilder, Int32) Declaration public static void StartStatesVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems StartSwitchesVector(FlatBufferBuilder, Int32) Declaration public static void StartSwitchesVector(FlatBufferBuilder builder, int numElems) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 numElems States(Int32) The settings to put different audio states into. Declaration public AudioState? States(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < AudioState > Switches(Int32) The configuration of the audio context –setting the audio “switches” to use the right sounds and effects for the circumstances. Declaration public AudioSwitch? Switches(int j) Parameters Type Name Description Int32 j Returns Type Description Nullable < AudioSwitch > Implements FlatBuffers.IFlatbufferObject"
  },
  "api/Anki.VectorAnim.SpriteBox.html": {
    "href": "api/Anki.VectorAnim.SpriteBox.html",
    "title": "Struct SpriteBox | Resources SDK",
    "keywords": "Struct SpriteBox The SpriteBox structure defines a rectangular region on the display to draw an image from a file. Implements FlatBuffers.IFlatbufferObject Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : Anki.VectorAnim Assembly : Anki.Resources.SDK.dll Syntax public struct SpriteBox : IFlatbufferObject Properties Alpha The % opacity of the image pixels. Default is 100.0 Declaration public float Alpha { get; } Property Value Type Description Single AssetName This can be the name of a sprite sequence, independent sprite, or \"clear_sprite_box\" for an empty image. Declaration public string AssetName { get; } Property Value Type Description String ByteBuffer Declaration public ByteBuffer ByteBuffer { get; } Property Value Type Description FlatBuffers.ByteBuffer Height The height of the sprite box. Unit: pixels Declaration public uint Height { get; } Property Value Type Description UInt32 Layer The name of the layer. The animation engine may use this to select the procedure(s) in charge managing the layer and sprite boxes Declaration public string Layer { get; } Property Value Type Description String RenderMethod \"CustomHue\" if the PNG images should be converted from gray scale to the colour using the current eye colour setting. \"RGBA\" if the image should be drawn as is. Declaration public string RenderMethod { get; } Property Value Type Description String SpriteBoxName The name of the sprite box. The animation engine may use this to select the procedure(s) in charge managing the layer and sprite boxes. If an image map is available for this animation, the sprite sequence it describes will be displayed in this rectangle. Declaration public string SpriteBoxName { get; } Property Value Type Description String SpriteSeqEndType Declaration public string SpriteSeqEndType { get; } Property Value Type Description String TriggerTimeMs The time when Vector should begin to use this sprite box. Declaration public uint TriggerTimeMs { get; } Property Value Type Description UInt32 Width The width of the sprite box. Unit: pixels Declaration public uint Width { get; } Property Value Type Description UInt32 XPos The x coordinate of the upper left hand corner of the sprite box. The x coordinate can be outside of the display area; only the portion of the image within the display area (0..183) will be shown. This allows an image to slide in.. Default: 0 Declaration public int XPos { get; } Property Value Type Description Int32 YPos The y coordinate of the upper left hand corner of the sprite box. The y coordinate can be outside of the display area; only the portion of the image within the display area (0..95) will be shown. This allows an image to slide in. Default: 00 Declaration public int YPos { get; } Property Value Type Description Int32 Methods __assign(Int32, ByteBuffer) Declaration public SpriteBox __assign(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb Returns Type Description SpriteBox __init(Int32, ByteBuffer) Declaration public void __init(int _i, ByteBuffer _bb) Parameters Type Name Description Int32 _i FlatBuffers.ByteBuffer _bb AddAlpha(FlatBufferBuilder, Single) Declaration public static void AddAlpha(FlatBufferBuilder builder, float alpha) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Single alpha AddAssetName(FlatBufferBuilder, StringOffset) Declaration public static void AddAssetName(FlatBufferBuilder builder, StringOffset assetNameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.StringOffset assetNameOffset AddHeight(FlatBufferBuilder, UInt32) Declaration public static void AddHeight(FlatBufferBuilder builder, uint height) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 height AddLayer(FlatBufferBuilder, StringOffset) Declaration public static void AddLayer(FlatBufferBuilder builder, StringOffset layerOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.StringOffset layerOffset AddRenderMethod(FlatBufferBuilder, StringOffset) Declaration public static void AddRenderMethod(FlatBufferBuilder builder, StringOffset renderMethodOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.StringOffset renderMethodOffset AddSpriteBoxName(FlatBufferBuilder, StringOffset) Declaration public static void AddSpriteBoxName(FlatBufferBuilder builder, StringOffset spriteBoxNameOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.StringOffset spriteBoxNameOffset AddSpriteSeqEndType(FlatBufferBuilder, StringOffset) Declaration public static void AddSpriteSeqEndType(FlatBufferBuilder builder, StringOffset spriteSeqEndTypeOffset) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder FlatBuffers.StringOffset spriteSeqEndTypeOffset AddTriggerTimeMs(FlatBufferBuilder, UInt32) Declaration public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTimeMs AddWidth(FlatBufferBuilder, UInt32) Declaration public static void AddWidth(FlatBufferBuilder builder, uint width) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 width AddXPos(FlatBufferBuilder, Int32) Declaration public static void AddXPos(FlatBufferBuilder builder, int xPos) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 xPos AddYPos(FlatBufferBuilder, Int32) Declaration public static void AddYPos(FlatBufferBuilder builder, int yPos) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Int32 yPos CreateSpriteBox(FlatBufferBuilder, UInt32, StringOffset, StringOffset, StringOffset, StringOffset, StringOffset, Single, Int32, Int32, UInt32, UInt32) Declaration public static Offset<SpriteBox> CreateSpriteBox(FlatBufferBuilder builder, uint triggerTime_ms = 0U, StringOffset spriteBoxNameOffset = default(StringOffset), StringOffset layerOffset = default(StringOffset), StringOffset assetNameOffset = default(StringOffset), StringOffset renderMethodOffset = default(StringOffset), StringOffset spriteSeqEndTypeOffset = default(StringOffset), float alpha = 100F, int xPos = 0, int yPos = 0, uint width = 0U, uint height = 0U) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder UInt32 triggerTime_ms FlatBuffers.StringOffset spriteBoxNameOffset FlatBuffers.StringOffset layerOffset FlatBuffers.StringOffset assetNameOffset FlatBuffers.StringOffset renderMethodOffset FlatBuffers.StringOffset spriteSeqEndTypeOffset Single alpha Int32 xPos Int32 yPos UInt32 width UInt32 height Returns Type Description FlatBuffers.Offset < SpriteBox > EndSpriteBox(FlatBufferBuilder) Declaration public static Offset<SpriteBox> EndSpriteBox(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Returns Type Description FlatBuffers.Offset < SpriteBox > GetAssetNameArray() Declaration public byte[] GetAssetNameArray() Returns Type Description Byte [] GetAssetNameBytes() Declaration public ArraySegment<byte>? GetAssetNameBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetLayerArray() Declaration public byte[] GetLayerArray() Returns Type Description Byte [] GetLayerBytes() Declaration public ArraySegment<byte>? GetLayerBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetRenderMethodArray() Declaration public byte[] GetRenderMethodArray() Returns Type Description Byte [] GetRenderMethodBytes() Declaration public ArraySegment<byte>? GetRenderMethodBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetRootAsSpriteBox(ByteBuffer) Declaration public static SpriteBox GetRootAsSpriteBox(ByteBuffer _bb) Parameters Type Name Description FlatBuffers.ByteBuffer _bb Returns Type Description SpriteBox GetRootAsSpriteBox(ByteBuffer, SpriteBox) Declaration public static SpriteBox GetRootAsSpriteBox(ByteBuffer _bb, SpriteBox obj) Parameters Type Name Description FlatBuffers.ByteBuffer _bb SpriteBox obj Returns Type Description SpriteBox GetSpriteBoxNameArray() Declaration public byte[] GetSpriteBoxNameArray() Returns Type Description Byte [] GetSpriteBoxNameBytes() Declaration public ArraySegment<byte>? GetSpriteBoxNameBytes() Returns Type Description Nullable < ArraySegment < Byte >> GetSpriteSeqEndTypeArray() Declaration public byte[] GetSpriteSeqEndTypeArray() Returns Type Description Byte [] GetSpriteSeqEndTypeBytes() Declaration public ArraySegment<byte>? GetSpriteSeqEndTypeBytes() Returns Type Description Nullable < ArraySegment < Byte >> StartSpriteBox(FlatBufferBuilder) Declaration public static void StartSpriteBox(FlatBufferBuilder builder) Parameters Type Name Description FlatBuffers.FlatBufferBuilder builder Implements FlatBuffers.IFlatbufferObject"
  },
  "api/gripes.html": {
    "href": "api/gripes.html",
    "title": "Some lessons | Resources SDK",
    "keywords": "Some lessons Some lessons I've learned in doing this: There are several areas that require scanning all of the files to find a resource. This should not be done on an embedded device like Vector. This uses limited memory, and battery life (to do all the accesses and processing). For example, there is no way to know which .bin file to load to get an animation (clip); the names can vary. Images shouldn't be reshaped/resized to fit on the display. That again takes time and battery life unneccessarily. I've had a wonderful time with C# and the .NET framework for decades. But I've had endless problems with .NET core and .NET standard. For instance, it will spontaneously announce that it can't load a standard .dll, Namespaces are an awful mess, creating unneccessary indentation blocks, and generally more confusion. They clearly are a bad solution to a problem that should exist. What is wrong with putting: namespace MyHackyNameToWorkAroundPoorLanguageDesign; instead? (If I wanted to hurt myself, I'd write in LISP.) It doesn't help that Visual Studio is a less-than great editor: sluggish, wasteful, and distracting. System.Text.Json has a lot of random, hidden \"rules\" lest hard-to-debug exceptions be thrown. It doesn't let one deserialize to private fields XML is the same VisualStudio is not a great environment. It (esp the devenv.exe) regularly spikes the CPU and is unresponsive. The tooltip popups are noisy. VisualStudio doesn't support forms in .NET core, and and requires a \"preview\" check box to turn this on... But the designer toolbox doesn't show any UI controls... Dear universe, we do not need 9000 variants of ADPCM encoding for the same basic bit depth & rate? Knock it off. NAudio requires Windows.Forms. This shouldn't be the case."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Documentation | Resources SDK",
    "keywords": "API Documentation This file summarizes the namespaces and classes in this assembly. There are separate namespaces to encapsulate generated code for the Cozmo and Vector flat-buffers animation files; and variety of AudioKinetic structures. Anki.AudioKinetic Namespace This namespace contains the all of the classes to access the AudioKinetic WWise sound assets. Component Description AudioAssets This class is used to wrap the audio assets in Vector and Cozmo. These assets are Audio-Kinetic WWise soundbank files and other supporting files. BNKReader This class is used to scan sound bank (BNK) files. EventInfo This is information on events that can be sent to the audio subsystem. FileInfo This is information on the sound files within a sound bank. IMAWaveProvider A helper to stream the WWise encoded IMA WEMReader This is used to open up the WEM segment in the BNK file and setup something that NAudio can access. Anki.CozmoAnim Namespace This namespace that contains all the classes used to read the binary Cozmo animation files. The Vector animation objects reuse (or share) the classes from Cozmo animation where possible. Most of these files are autogenerated. Component Description AnimClip The AnimClip is a named animation that can be played. AnimClips An animation file is defined by this structure at the top level. It provides one or more animation “clips” in the file. Each clip has one or more tracks. The file is defined by this structure at the top level BackpackLights BodyMotion The BodyMotion structure is used to specify driving motions. Event The Event structure is used to pause the animation at the given time code until the event is received or cancelled. When the event is received, the animation resumes the given time code. FaceAnimation HeadAngle The HeadAngle structure is used to specify how to move Vector’s head. The head should reach the target angle in the duration given, ramping up the movement speed smoothly (with some variability) until it reaches that that point. Keyframes The KeyFrames structure provides separate time-coded key frames for each of the possible tracks in the animation. The tracks are optional. There tracks may have different numbers of key frames. The key frames do not need to start at the same time(s). LiftHeight The LiftHeight structure is used to specify how to move Vector’s lift. The lift should reach the target height in the duration given, ramping up the movement speed smoothly (with some variability) until it reaches that. ProceduralFace RecordHeading The RecordHeading structure is used to recording the robots heading, at the start of an animation. [or possibly after a randomized body motion?] RobotAudio The RobotAudio structure is used to interact with the audio engine. TurnToRecordedHeading The TurnToRecordedHeading is used to specify how Vector should turn to the previously recorded heading. The robot reach the target heading in the duration given, ramping up the movement speed smoothly until it reaches that position (within some tolerance). Anki.Resources.SDK Namespace This namespace contains the main animation and behavior classes: Component Description AnimationGroupItem The AnimationGroupItem structure describes the specific animation clip to use. It may also specify some head movement, with some variability; this is optional. If enabled, the head is to move to some angle (between the given min and max) while the animation plays. Assets A class to access the resources in the Cozmo_Resources folder for Vector (And maybe some of Cozmo). BehaviorCoordinator A helper for behaviors like games and weather. BlackJack The behavior to support the Black Jack game. Clock The behavior to support the Clock / Timer behaviors. CompositeImage A composite image defines layers on the display with rectangular areas where images and sprite sequences will be drawn. DecayGraph This describes how an emotion decays over time. EmotionAffector The EmotionAffector describes how an emotion dimension should be modified. EmotionEvent The EmotionEvent describes how the emotions respond to a given event. LightFrame This is used to desribe the illumination of a single light. LightsPattern This describes the pattern for all of the lights on the item. MinMax A helper class to hold the allow minimum and maximum. SimpleVoiceResponse The animation and emotion changes that should occur. SpriteBox A sprite box defines a rectangular area on the display to draw an image of sprite sequence. SpriteSequence This is a wrapper around an sprite sequence. TextSubstitution Provide a localized strings with substituted matches. UserIntentMap A table that maps the intent received by the cloud or application to the intent name used internally. This includes renaming the parameters. Weather The Weather behavior. XY The XY structure is used to define how a value (often the value associated with an emotion dimension) should decay with time.. Anki.VectorAnim Namespace This namespace that contains all the classes used to read the binary Vector animation files. Where possible it reuses the Cozmo classes. Most of these files are autogenerated. Component Description AnimClip The AnimClip is a named animation that can be played. AnimClips An animation file is defined by this structure at the top level. It provides one or more animation “clips” in the file. Each clip has one or more tracks. The file is defined by this structure at the top level AudioEventGroup The AudioEventGroup structure is used to randomly select an audio event (and volume), and send it to the audio subsystem. AudioParameter The AudioParameter structure is used to set one of the sound parameters in the AudioKinetic Wwise subsystem. AudioState The AudioState structure is used to put the audio system into a particular state. AudioSwitch The AudioSwitch structure is used to put an audio switch into a particular setting. BackpackLights The BackpackLights structure is used to animate the lights on Vector’s back. FaceAnimation The FaceAnimation structure is used to specify the JSON file to animation Vector’s display. Keyframes The KeyFrames structure provides separate time-coded key frames for each of the possible tracks in the animation. The tracks are optional. There tracks may have different numbers of key frames. The key frames do not need to start at the same time(s). ProceduralFace RobotAudio The RobotAudio structure is used to interact with the audio engine. SpriteBox The SpriteBox structure defines a rectangular region on the display to draw an image from a file. RCM Namespace This namespace is used to contain extra helper procedures and classes. Component Description FolderWrapper This is a class to allow access to resources within a folder. It is a sibling to ZipWrapper that can access resources within a zip file. IFolderWrapper This is an interface to allow access to resources within a folder or archive. Util A class to hold a variety of helper utilities. ZipWrapper This is a class to allow access to resources within an archive. It is a sibling to FolderWrapper that can access resources within a folder. some gripes"
  },
  "api/packages.html": {
    "href": "api/packages.html",
    "title": "Packages | Resources SDK",
    "keywords": "Packages This library employs the following nuget packages: Package Purpose NAudio Used for sound playback of decoded audio NVorbis Used to decode Vorbis audio NAudio.Vorbis Used to complete the bridging of Vorbis to the audio playback. System.Text.Json Used to read JSON files; the JSON files are heavily used in the resources folder System . ? Display Used for the bitmap images EMGU.CV Used to provide OpenCV to C# by wrapping it. This is used by the vision classifiers. EMGU.TF.Lite Used to provide TFLite to C# by wrapping it. This is used by the vision classifiers. Applications may have to apply some of the other packages in to be fully realized: Package Purpose Emgu.CV.runtime.windows Used to provide the windows-specific openCV binaries. Emgu.TF.Lite.runtime.windows Used to provide the windows-specific TFLite binaries."
  },
  "api/RCM.FolderWrapper.html": {
    "href": "api/RCM.FolderWrapper.html",
    "title": "Class FolderWrapper | Resources SDK",
    "keywords": "Class FolderWrapper This is a class to allow access to resources within a folder. It is a sibling to ZipWrapper that can access resources within a zip file Inheritance Object FolderWrapper Implements IFolderWrapper IDisposable Namespace : RCM Assembly : Anki.Resources.SDK.dll Syntax public class FolderWrapper : IFolderWrapper, IDisposable Constructors FolderWrapper(String) Creates an object that can access resources within a folder Declaration public FolderWrapper(string basePath) Parameters Type Name Description String basePath The basepath to the folder Methods Dispose() Dispose of any internal resources Declaration public void Dispose() Dispose(Boolean) Dispose of the binary stream Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Exists(String) Determines whether the specified file exists. Declaration public bool Exists(string relativePath) Parameters Type Name Description String relativePath The name of file within the wrapper Returns Type Description Boolean true if the file exists within the wrapper, false otherwise Stream(String) This creates a stream for the given resources within the folder Declaration public Stream Stream(string relativePath) Parameters Type Name Description String relativePath The name of file within the wrapper Returns Type Description Stream A stream that can be used to access the file Implements IFolderWrapper System.IDisposable"
  },
  "api/RCM.html": {
    "href": "api/RCM.html",
    "title": "| Resources SDK",
    "keywords": "Classes FolderWrapper This is a class to allow access to resources within a folder. It is a sibling to ZipWrapper that can access resources within a zip file Util A class to hold a variety of helper utilities ZipWrapper This is a class to allow access to resources within an archive. It is a sibling to FolderWrapper that can access resources within a folder Interfaces IFolderWrapper This is an interface to allow access to resources within a folder or archive"
  },
  "api/RCM.IFolderWrapper.html": {
    "href": "api/RCM.IFolderWrapper.html",
    "title": "Interface IFolderWrapper | Resources SDK",
    "keywords": "Interface IFolderWrapper This is an interface to allow access to resources within a folder or archive Inherited Members IDisposable.Dispose() Namespace : RCM Assembly : Anki.Resources.SDK.dll Syntax public interface IFolderWrapper : IDisposable Methods Exists(String) Determines whether the specified file exists. Declaration bool Exists(string relativePath) Parameters Type Name Description String relativePath The name of file within the wrapper Returns Type Description Boolean true if the file exists within the wrapper, false otherwise Stream(String) This creates a stream for the given resources within the container Declaration Stream Stream(string relativePath) Parameters Type Name Description String relativePath The name of file within the container Returns Type Description Stream A stream that can be used to access the file data"
  },
  "api/RCM.Util.html": {
    "href": "api/RCM.Util.html",
    "title": "Class Util | Resources SDK",
    "keywords": "Class Util A class to hold a variety of helper utilities Inheritance Object Util Namespace : RCM Assembly : Anki.Resources.SDK.dll Syntax public static class Util Properties AssemblyDirectory The path of the executing assembly Declaration public static string AssemblyDirectory { get; } Property Value Type Description String Remarks https://stackoverflow.com/questions/52797/how-do-i-get-the-path-of-the-assembly-the-code-is-in Methods BuildNameToRelativePathXref(String, String) A helper to go from partial file name to the full file name Declaration public static Dictionary<string, string> BuildNameToRelativePathXref(string path, string extension = \"json\") Parameters Type Name Description String path The path to search within String extension The file name extension (defualt is json) Returns Type Description Dictionary < String , String > The dictionary mapping the partial file names to the path ImageOpen(String) Open a bitmap image at the given path Declaration public static Bitmap ImageOpen(string imagePath) Parameters Type Name Description String imagePath Returns Type Description Bitmap The bitmap image JsonToNormal(JsonElement) Converts the JSON element to a C# object Declaration public static object JsonToNormal(JsonElement item) Parameters Type Name Description JsonElement item The JSON element Returns Type Description Object The new thing NumberOfBitsSet(UInt32) Counts the number of bits set Declaration public static uint NumberOfBitsSet(uint i) Parameters Type Name Description UInt32 i value to count bits in Returns Type Description UInt32 The number of bits set RemoveBasePath(String, String) This is use to remove the base path from the full path Declaration public static string RemoveBasePath(string basePath, string path) Parameters Type Name Description String basePath The path that should be removed String path The path that is to be modified Returns Type Description String The resulting path Tag(String) Map a 4-character tag string to the UInt32 form Declaration public static uint Tag(string tagStr) Parameters Type Name Description String tagStr The 4 character tag string Returns Type Description UInt32 The representation as a machine word ToDict(Dictionary<String, Object>) Convert the JSON to a dictionary to an array of strings Declaration public static Dictionary<string, object> ToDict(Dictionary<string, object> a) Parameters Type Name Description Dictionary < String , Object > a The dictionary of JSON elements Returns Type Description Dictionary < String , Object > The dictionary ToDict(JsonElement) Convert the JSON element to an a dictionary Declaration public static Dictionary<string, object> ToDict(JsonElement a) Parameters Type Name Description JsonElement a The JSON element Returns Type Description Dictionary < String , Object > The dictionary"
  },
  "api/RCM.ZipWrapper.html": {
    "href": "api/RCM.ZipWrapper.html",
    "title": "Class ZipWrapper | Resources SDK",
    "keywords": "Class ZipWrapper This is a class to allow access to resources within an archive. It is a sibling to FolderWrapper that can access resources within a folder Inheritance Object ZipWrapper Implements IFolderWrapper IDisposable Namespace : RCM Assembly : Anki.Resources.SDK.dll Syntax public class ZipWrapper : IFolderWrapper, IDisposable Constructors ZipWrapper(String) Creates an object that can access resources within an archive Declaration public ZipWrapper(string path) Parameters Type Name Description String path The path to the archive file Methods Dispose() Dispose of any internal resources Declaration public void Dispose() Dispose(Boolean) Dispose of the archive Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true, right? Exists(String) Determines whether the specified file exists. Declaration public bool Exists(string relativePath) Parameters Type Name Description String relativePath The name of file within the wrapper Returns Type Description Boolean true if the file exists within the wrapper, false otherwise Retain() Increment the reference count for this object. Decrement the count using Dispose(). Declaration public void Retain() Stream(String) This creates a stream for the given resources within the container Declaration public Stream Stream(string relativePath) Parameters Type Name Description String relativePath The name of file within the container Returns Type Description Stream null on error, otherwise a stream that can be used to access the file data Implements IFolderWrapper System.IDisposable"
  },
  "index.html": {
    "href": "index.html",
    "title": "Anki Vector/Cozmo Resources SDK (.NET) | Resources SDK",
    "keywords": "Anki Vector/Cozmo Resources SDK (.NET) This SDK allows manipulation of a resources folder from an \"over the air update\" OTA file for Anki Vector and the APK files for Anki Cozmo , in any .NET language (C#, VB.NET, F#) or language that interoperates (python) on Windows, Mac, and Linux. This requires that you know how to one of these files, and how extract the contents. You can play the audio sounds on your computer Examine the sprite-sequences, and other animations on your computer, It has lint-like checking to help catch flaws in the resource bundle, so that they can be eliminated before shipping, reducing the test effort There is some support for Cozmo resources. Note: This SDK is not a product of Anki or Digital Dream Labs, and is not supported by them. Getting Started Download Microsoft development tools If you working on Windows, download Visual Studio 2019 Community Edition to get started. This version is free for personal use. Download Visual Studio 2019 Community Edition To get started on Mac and Linux, you can download .NET Core 3.0. Download .NET Core 3.0 To play audio you will need to add the following packages to your project: NAudio NVorbis NAudio.Vorbis To play with the sprites you will need to add the following packages to your project: System.Drawing.Common Download Github Nuget SDK Example Code / Tutorial Programs Some examples of how to use the SDK can be found at Anki.Resources.Samples GitHub project Documentation The documentation can be found at randym32.github.io/Anki.Resources.SDK Browser configuration notes The documentation, when browsed from a local filesystem, may require tweaking the browser. Firefox Go to about:config and make change to the following: security.fileuri.strict_origin_policy set to false privacy.file_unique_origin set to false Chrome You can not use Chrome with a local file system. You can, however, use an extension like \"Web Server for Chrome\" Getting help Being a new library, there is not yet an established usage pattern, clear place and patterns for getting help. Try Official Anki developer forums : https://forums.anki.com/ Anki Vector developer subreddit : https://www.reddit.com/r/ankivectordevelopers Anki robots Discord chat : https://discord.gg/FT8EYwu Contributing View the Anki.Resources.SDK GitHub Project for information on contributing. Grateful Acknowledgements and Special Thanks Thank-you to the vgmstream and ww2ogg projects, whose efforts allowed decoding of the audio files. Wayne Venables, you set a very high bar with Anki.Vector.SDK I lifted some of your index.md getting started information for here. Packages used by this SDK"
  }
}